This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-30T00:57:22.682Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.env.example
.gitignore
backend/.coveragerc
backend/.dockerignore
backend/app.py
backend/auth.py
backend/cfknn.py
backend/Dockerfile
backend/gemini.py
backend/news_digest.py
backend/requirements.txt
backend/routes/mlb.py
backend/train.py
docker-compose.yml
frontend/__mocks__/fileMock.js
frontend/.dockerignore
frontend/.env.example
frontend/coverage/clover.xml
frontend/coverage/lcov-report/base.css
frontend/coverage/lcov-report/block-navigation.js
frontend/coverage/lcov-report/index.html
frontend/coverage/lcov-report/prettify.css
frontend/coverage/lcov-report/prettify.js
frontend/coverage/lcov-report/sorter.js
frontend/coverage/lcov-report/TeamPlayerSelector.js.html
frontend/coverage/lcov.info
frontend/Dockerfile
frontend/jest.config.js
frontend/nginx.conf
frontend/postcss.config.js
frontend/public/images/logo.svg
frontend/public/index.html
frontend/src/App.js
frontend/src/components/__tests__/TeamPlayerSelector.test.js
frontend/src/components/Calendar.js
frontend/src/components/LanguageSelector.js
frontend/src/components/Navbar.js
frontend/src/components/Navigation.js
frontend/src/components/NewsDigest.js
frontend/src/components/PageTransition.js
frontend/src/components/ProtectedRoute.js
frontend/src/components/Sidebar.js
frontend/src/components/TeamPlayerSelector.js
frontend/src/components/TranslatedText.js
frontend/src/components/ui/Button.js
frontend/src/constants/index.js
frontend/src/contexts/AuthContext.js
frontend/src/contexts/LanguageContext.js
frontend/src/hooks/useDarkMode.js
frontend/src/hooks/usePreferences.js
frontend/src/index.css
frontend/src/index.js
frontend/src/layouts/MainLayout.js
frontend/src/pages/ButtonPage.js
frontend/src/pages/Home.js
frontend/src/pages/Login.js
frontend/src/pages/News.js
frontend/src/pages/Preferences.js
frontend/src/pages/Profile.js
frontend/src/pages/RecommendationsPage.js
frontend/src/pages/Register.js
frontend/src/services/dataService.js
frontend/src/services/translationService.js
frontend/src/services/userService.js
frontend/src/setupTests.js
frontend/src/styles/tailwind.css
frontend/src/utils/api.js
frontend/src/utils/retry.js
frontend/tailwind.config.js
LICENSE
path/to/index.html
path/to/styles/video.css
path/to/video/embed.js
README.md
remove-model.txt
setup.sh
upload_db.py

================================================================
Files
================================================================

================
File: .env.example
================
# Flask configuration
FLASK_ENV=development
FLASK_APP=app.py
FLASK_DEBUG=1

# API Keys
GOOGLE_API_KEY=your_google_api_key_here
GOOGLE_APPLICATION_CREDENTIALS=your_google_application_credentials_here_json
GOOGLE_CLOUD_PROJECT=goatsquad

# Docker configuration
COMPOSE_PROJECT_NAME=mlb-fan-feed
NODE_ENV=development

# Server configuration
BACKEND_PORT=5000
FRONTEND_PORT=3000
HOST=0.0.0.0

# CORS settings
CORS_ORIGIN=http://localhost:3000

# Database configuration
DATABASE_URL=postgresql+pg8000://username:password@/client_info?unix_sock=/cloudsql/PROJECT_ID:REGION:INSTANCE_NAME/.s.PGSQL.5432
DB_USER=postgres
DB_PASS=vibhas69
DB_NAME=user_ratings_db
CLOUD_SQL_CONNECTION_NAME=goatsquad:us-central1:goatsql

# JWT Secret Key
JWT_SECRET_KEY=key_here

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# User db
users.db

# C extensions
*.so

codebase.md
repomix-output.txt
# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# PyPI configuration file
.pypirc

# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

node_modules

# Add to existing .gitignore
temp/
output/

# Environment files
.env
.env.local
.env.*.local
backend/.env
frontend/.env
*.json

# Databases
mlb_highlights_2019-2024.csv
mlb_highlights_2019-2024_players.csv

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# User db
users.db

# C extensions
*.so

codebase.md
# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# PyPI configuration file
.pypirc

# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

node_modules

# Add to existing .gitignore
temp/
output/

# Environment files
.env
.env.local
.env.*.local
backend/.env
frontend/.env
*.json
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# User db
users.db

# C extensions
*.so

codebase.md
# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# PyPI configuration file
.pypirc

# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

node_modules

# Add to existing .gitignore
temp/
output/

# Environment files
.env
.env.local
.env.*.local
backend/.env
frontend/.env
*.json

#Model
backend/knn_model.pkl

# Ignore .DS_Store files
.DS_Store
#ignore model
backend/knn_model.pkl

================
File: backend/.coveragerc
================
[run]
source = .
omit = 
    tests/*
    */__init__.py
    setup.py

[report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass

================
File: backend/.dockerignore
================
__pycache__
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.env
*.log
.git
.gitignore

================
File: backend/app.py
================
from flask import Flask, request, jsonify, Response
from flask_restx import Api, Resource
from flask_cors import CORS
from news_digest import get_news_digest
import logging
import requests
from datetime import datetime
import os
from google.cloud import translate_v2 as translate
from auth import AuthService, token_required, db, init_admin
import grpc
from routes.mlb import mlb
from flask_migrate import Migrate
from google.cloud.sql.connector import Connector
import sqlalchemy
from werkzeug.middleware.proxy_fix import ProxyFix
from cfknn import recommend_reels, build_and_save_model, run_main
from db import load_data, add, remove, get_video_url, get_follow_vid
from sqlalchemy import create_engine
from sqlalchemy.sql import text
from gemini import run_gemini_prompt
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ORIGINAL_DIR = os.path.dirname(os.path.abspath(__file__))

def init_connection_pool():
    """Initialize database connection"""
    db_user = os.getenv("DB_USER")
    db_pass = os.getenv("DB_PASS")
    db_name = os.getenv("DB_NAME")
    
    DATABASE_URL = f"postgresql://{db_user}:{db_pass}@34.71.48.54:5432/{db_name}"
    return DATABASE_URL

app = Flask(__name__)

@app.before_request
def before_request():
    os.chdir(ORIGINAL_DIR)

print("2. Before Flask app creation:", os.getcwd())

# Configure database connection
app.config['SQLALCHEMY_DATABASE_URI'] = init_connection_pool()

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)
print("11. Before Flask app creation:", os.getcwd())
current_dir = os.getcwd()
print("11. Before Flask app creation:", os.getcwd())
print(current_dir)
migrate = Migrate(app, db)

with app.app_context():
    try:
        db.create_all()
        # Initialize admin user
        init_admin()
    except Exception as e:
        logger.error(f"Database initialization error: {str(e)}")
        db.session.rollback()

# Update CORS configuration
CORS(app, resources={
    r"/*": {
        "origins": ["http://localhost:3000"],
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "expose_headers": ["Content-Range", "X-Content-Range"],
        "supports_credentials": True
    }
})

api = Api(app, version='1.0', 
    title='MLB Fan Feed API',
    description='API for MLB fan feed features')



news_ns = api.namespace('news', description='News operations')

@news_ns.route('/digest')
class NewsDigest(Resource):
    @news_ns.doc('get_news_digest')
    @news_ns.param('teams[]', 'Team names array')
    @news_ns.param('players[]', 'Player names array')
    def get(self):
        """Get news digest for multiple teams and players"""
        try:
            # Get arrays from request args
            teams = request.args.getlist('teams[]')
            players = request.args.getlist('players[]')
            
            logger.info(f"Received request with teams: {teams}, players: {players}")
            
            if not teams and not players:
                return {'error': 'At least one team or player must be specified'}, 400
            
            # Filter out empty strings
            teams = [t for t in teams if t]
            players = [p for p in players if p]
                
            result = get_news_digest(teams=teams, players=players)
            
            if result['success']:
                return jsonify(result)
            else:
                return {'error': result.get('error', 'Unknown error occurred')}, 500
                
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}", exc_info=True)
            return {'error': 'Internal server error'}, 500

@app.route('/api/mlb/highlights')
def get_highlights():
    """Proxy endpoint for MLB highlights"""
    try:
        team_id = request.args.get('team_id')
        player_id = request.args.get('player_id')
        
        logger.info(f"Fetching highlights for team {team_id} and player {player_id}")

        # First get schedule to find recent games
        schedule_url = 'https://statsapi.mlb.com/api/v1/schedule'
        schedule_params = {
            'teamId': team_id,
            'season': 2024,
            'sportId': 1,
            'gameType': 'R'
        }

        schedule_response = requests.get(schedule_url, params=schedule_params)
        schedule_response.raise_for_status()
        schedule_data = schedule_response.json()

        all_highlights = []
        for date in schedule_data.get('dates', [])[:10]:  
            for game in date.get('games', []):
                game_pk = game.get('gamePk')
                
                # Get game content
                content_url = f'https://statsapi.mlb.com/api/v1/game/{game_pk}/content'
                content_response = requests.get(content_url)
                content_response.raise_for_status()
                content_data = content_response.json()

                # Look for highlights in game content
                for highlight in content_data.get('highlights', {}).get('highlights', {}).get('items', []):
                    # Check if highlight involves the player
                    if any(keyword.get('type') == 'player_id' and 
                          keyword.get('value') == str(player_id) 
                          for keyword in highlight.get('keywordsAll', [])):
                        
                        # Get the best quality playback URL
                        playbacks = highlight.get('playbacks', [])
                        if playbacks:
                            best_playback = max(playbacks, key=lambda x: int(x.get('height', 0) or 0))
                            all_highlights.append({
                                'title': highlight.get('title', ''),
                                'description': highlight.get('description', ''),
                                'url': best_playback.get('url'),
                                'date': date.get('date'),
                                'blurb': highlight.get('blurb', ''),
                                'timestamp': highlight.get('date', date.get('date'))  # Use highlight date if available
                            })

        sorted_highlights = sorted(
            all_highlights,
            key=lambda x: datetime.strptime(x['date'], '%Y-%m-%d') if x['date'] else datetime.min,
            reverse=True
        )[:5]

        logger.info(f"Found {len(sorted_highlights)} recent highlights")
        return jsonify({'highlights': sorted_highlights})

    except requests.exceptions.RequestException as e:
        logger.error(f"Error making request to MLB API: {str(e)}")
        return {'error': 'Failed to fetch highlights from MLB'}, 500
    except Exception as e:
        logger.error(f"Error fetching highlights: {str(e)}", exc_info=True)
        return {'error': 'Failed to fetch highlights'}, 500

@app.route('/recommend/add', methods=['POST', 'GET'])
def add_rating():
    """Add or update a user's rating for a reel"""
    try:
        user_id = request.args.get('user_id')
        reel_id = request.args.get('reel_id')
        rating = request.args.get('rating')
        table = request.args.get('table', default='user_ratings_db')

        if not all([user_id, reel_id, rating]):
            return jsonify({'success': False, 'message': 'Missing required fields'}), 400

        try:
            rating = float(rating)
            if not (0 <= rating <= 5):
                return jsonify({'success': False, 'message': 'Rating must be between 0 and 5'}), 400
        except ValueError:
            return jsonify({'success': False, 'message': 'Invalid rating value'}), 400

        add(user_id, reel_id, rating, table)
        return jsonify({'success': True, 'message': 'Rating added successfully'}), 200
    except Exception as e:
        logger.error(f"Error adding rating: {str(e)}", exc_info=True)
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/recommend/remove', methods=['DELETE'])
def remove_rating():
    """Remove a user reel rating"""
    try:
        user_id = request.args.get('user_id')
        reel_id = request.args.get('reel_id')
        table = request.args.get('table', default='user_ratings_db')

        if not all([user_id, reel_id]):
            return jsonify({'success': False, 'message': 'Missing required fields'}), 400

        remove(user_id, reel_id, table)
        return jsonify({'success': True, 'message': 'Rating removed successfully'}), 200
    except Exception as e:
        logger.error(f"Error removing rating: {str(e)}", exc_info=True)
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/recommend/predict', methods=['GET'])
def get_model_recommendations():
    """Get recommendations from the model"""
    try:
        user_id = int(request.args.get('user_id'))
        page = int(request.args.get('page', default=1))
        per_page = int(request.args.get('per_page', default=5))
        table = request.args.get('table', default='user_ratings_db')
        
        offset = (page - 1) * per_page
        recommendations, has_more = run_main(table, user_id=user_id, num_recommendations=per_page, offset=offset)
        
        if recommendations:
            return jsonify({
                'success': True,
                'recommendations': recommendations,
                'has_more': has_more
            })
        
        return jsonify({'success': False, 'message': 'No recommendations found'}), 404
        
    except Exception as e:
        logger.error(f"Error getting model recommendations: {str(e)}", exc_info=True)
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/recommend/follow', methods=['GET'])
@token_required
def get_follow_recommendations(current_user):
    """Get recommendations based on followed teams and players"""
    try:
        table = request.args.get('table', default='mlb_highlights')
        page = int(request.args.get('page', default=1))
        per_page = int(request.args.get('per_page', default=5))

        # Get user's followed teams and players from database
        if not current_user:
            return jsonify({'success': False, 'message': 'User not found'}), 404

        # Extract team names and player names from the JSON objects
        followed_teams = [team.get('name', '') for team in (current_user.followed_teams or [])]
        followed_players = [player.get('fullName', '') for player in (current_user.followed_players or [])]

        if not followed_teams and not followed_players:
            return jsonify({'success': False, 'message': 'No teams or players followed'}), 400

        # Calculate offset for pagination
        offset = (page - 1) * per_page

        # Get multiple videos for followed teams/players with pagination
        engine = create_engine(init_connection_pool())
        query = text(f"""
            SELECT id as reel_id FROM {table} 
            WHERE player = ANY(:players) OR home_team = ANY(:teams) OR away_team = ANY(:teams)
            ORDER BY RANDOM()
            OFFSET :offset
            LIMIT :limit
        """)
        
        with engine.connect() as connection:
            results = connection.execute(query, {
                "players": followed_players, 
                "teams": followed_teams,
                "offset": offset,
                "limit": per_page + 1  # Get one extra to check if there are more
            }).fetchall()
            
            if results:
                has_more = len(results) > per_page
                recommendations = [{"reel_id": row[0]} for row in results[:per_page]]
                return jsonify({
                    'success': True,
                    'recommendations': recommendations,
                    'has_more': has_more
                })
            
            return jsonify({'success': False, 'message': 'No matching videos found'}), 404
            
    except Exception as e:
        logger.error(f"Error fetching follow recommendations: {str(e)}", exc_info=True)
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/generate-blurb', methods=['POST'])
def generate_blurb():
    data = request.json
    title = data.get('title')

    if not title:
        logger.error("Title is required in the request.")
        return jsonify({"success": False, "message": "Title is required"}), 400

    title = re.sub(r"\s*\([^)]*\)$", "", title)

    try:
        prompt = f"Generate a short and engaging description for the baseball video titled: {title}. Keep your response to under 20 words. Your response should start with the content and just one sentence. Do not include filler like OK, here is a short and engaging description."
        description = run_gemini_prompt(prompt)
        if ':' in description:
            description = description.split(':', 1)[1].strip()
        if description:
            return jsonify({
                "success": True,
                "description": description
            })
        else:
            return jsonify({
                "success": False,
                "message": "Failed to generate description"
            }), 500

    except Exception as e:
        logger.error(f"Error in generating description: {str(e)}", exc_info=True)
        return jsonify({
            "success": False,
            "message": "Internal server error"
        }), 500

# Initialize the translation client
translate_client = translate.Client()

@app.route('/api/translate', methods=['POST'])
def translate_text():
    try:
        data = request.get_json()
        text = data.get('text')
        target_language = data.get('target_language', 'en')

        if not text:
            return jsonify({
                'success': False,
                'message': 'No text provided for translation'
            }), 400

        # Perform translation
        result = translate_client.translate(
            text,
            target_language=target_language
        )

        return jsonify({
            'success': True,
            'translatedText': result['translatedText'],
            'sourceLanguage': result['detectedSourceLanguage']
        })

    except Exception as e:
        logger.error(f"Translation error: {str(e)}", exc_info=True)
        return jsonify({
            'success': False,
            'message': 'Translation failed',
            'error': str(e)
        }), 500

@app.errorhandler(Exception)
def handle_error(error):
    logger.error(f"Unhandled error: {str(error)}", exc_info=True)
    message = str(error)
    status_code = 500
    if hasattr(error, 'code'):
        status_code = error.code
    return jsonify({'success': False, 'message': message}), status_code

auth_ns = api.namespace('auth', description='Authentication operations')

@auth_ns.route('/register')
class Register(Resource):
    def post(self):
        """Register a new user"""
        try:
            data = request.get_json()
            logger.info(f"Register attempt for email: {data.get('email')}")
            return AuthService.register_user(data)
        except Exception as e:
            logger.error(f"Registration error: {str(e)}", exc_info=True)
            return {'success': False, 'message': str(e)}, 500

@auth_ns.route('/login')
class Login(Resource):
    def post(self):
        """Login user"""
        try:
            data = request.get_json()
            logger.info(f"Login attempt for email: {data.get('email')}")
            return AuthService.login_user(data.get('email'), data.get('password'))
        except Exception as e:
            logger.error(f"Login error: {str(e)}", exc_info=True)
            return {'success': False, 'message': str(e)}, 500

@auth_ns.route('/profile')
class UserProfile(Resource):
    @token_required
    def get(self, current_user):
        """Get user profile"""
        try:
            if not current_user:
                return {'success': False, 'message': 'User not found'}, 404

            logger.info(f"Profile fetch for user ID: {current_user.client_id}")
            return {'success': True, 'user': current_user.to_dict()}, 200

        except Exception as e:
            logger.error(f"Profile fetch error: {str(e)}", exc_info=True)
            return {'success': False, 'message': str(e)}, 500

    @token_required
    def put(self, current_user):
        """Update user profile"""
        try:
            if not current_user:
                return {'success': False, 'message': 'User not found'}, 404

            data = request.get_json()
            logger.info(f"Profile update for user ID: {current_user.client_id}")
            return AuthService.update_user_profile(current_user.client_id, data)
        except Exception as e:
            logger.error(f"Profile update error: {str(e)}", exc_info=True)
            return {'success': False, 'message': str(e)}, 500

@app.route('/test')
def test():
    """Test endpoint to verify server is running"""
    return jsonify({
        'success': True,
        'message': 'Backend server is running',
        'timestamp': datetime.utcnow().isoformat()
    })

# Register blueprints
app.register_blueprint(mlb)

@app.route('/api/mlb/schedule', methods=['GET'])
def get_mlb_schedule():
    team_id = request.args.get('teamId')
    start_date = request.args.get('startDate')
    end_date = request.args.get('endDate')
    
    try:
        response = requests.get(
            'https://statsapi.mlb.com/api/v1/schedule',
            params={
                'teamId': team_id,
                'startDate': start_date,
                'endDate': end_date,
                'sportId': 1,
                'hydrate': 'team,venue'
            }
        )
        return jsonify(response.json())
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/preferences', methods=['GET', 'PUT'])
@token_required
def handle_preferences(current_user):
    if request.method == 'GET':
        return jsonify({
            'success': True,
            'preferences': {
                'teams': current_user.followed_teams or [],
                'players': current_user.followed_players or []
            }
        })
    
    elif request.method == 'PUT':
        try:
            data = request.get_json()
            current_user.followed_teams = data.get('teams', [])
            current_user.followed_players = data.get('players', [])
            db.session.commit()
            
            return jsonify({
                'success': True,
                'message': 'Preferences updated successfully',
                'preferences': {
                    'teams': current_user.followed_teams,
                    'players': current_user.followed_players
                }
            })
        except Exception as e:
            db.session.rollback()
            return jsonify({
                'success': False,
                'message': str(e)
            }), 500

@app.route('/api/mlb/teams', methods=['GET'])
def get_mlb_teams():
    try:
        logger.info("Attempting to fetch MLB teams...")
        response = requests.get(
            'https://statsapi.mlb.com/api/v1/teams',
            params={'sportId': 1},
            timeout=15,
            headers={
                'Accept': 'application/json',
                'User-Agent': 'MLBFanFeed/1.0'
            }
        )
        logger.info(f"MLB API Response Status: {response.status_code}")
        
        # Add caching headers
        response_data = response.json()
        resp = jsonify({
            'teams': response_data.get('teams', []),
            'copyright': response_data.get('copyright', '')
        })
        resp.cache_control.max_age = 3600  # Cache for 1 hour
        return resp
        
    except requests.exceptions.Timeout:
        logger.error("Timeout while fetching MLB teams")
        # Return cached data if available
        return jsonify({
            'success': False,
            'message': 'Request to MLB API timed out. Please try again.',
            'error': 'TIMEOUT'
        }), 504
        
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching MLB teams: {str(e)}", exc_info=True)
        return jsonify({
            'success': False,
            'message': f'Failed to fetch teams from MLB API: {str(e)}'
        }), 500
        
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}", exc_info=True)
        return jsonify({
            'success': False,
            'message': f'An unexpected error occurred: {str(e)}'
        }), 500

@app.errorhandler(requests.exceptions.RequestException)
def handle_request_error(error):
    logger.error(f"Request error: {str(error)}")
    return jsonify({
        'success': False,
        'message': 'External API request failed',
        'error': str(error)
    }), 500

@app.errorhandler(Exception)
def handle_general_error(error):
    logger.error(f"Unexpected error: {str(error)}")
    return jsonify({
        'success': False,
        'message': 'An unexpected error occurred',
        'error': str(error)
    }), 500

@app.route('/api/test', methods=['GET'])
def test_endpoint():
    return jsonify({
        'success': True,
        'message': 'Backend is working',
        'timestamp': datetime.utcnow().isoformat()
    })

@app.route('/api/perform-action', methods=['POST'])
def perform_action():
    try:
        # Call the recommendation system with default values
        user_id = 10  # Default user_id
        num_recommendations = 5  # Default number of recommendations
        table = 'user_ratings_db'  # Default table
        
        # Run the model
        recommendations = run_main(table, user_id=user_id, num_recommendations=num_recommendations, model_path='knn_model.pkl')
        
        return jsonify({
            'success': True,
            'message': 'Recommendations generated successfully!',
            'data': {
                'timestamp': datetime.utcnow().isoformat(),
                'recommendations': recommendations,
                'user_id': user_id,
                'num_recommendations': num_recommendations
            }
        })
    except Exception as e:
        logger.error(f"Recommendation error: {str(e)}", exc_info=True)
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

@app.route('/api/mlb/video', methods=['GET'])
def get_video_url_endpoint():
    """Get video URL and metadata from database using play ID"""
    try:
        play_id = request.args.get('play_id')
        if not play_id:
            return jsonify({'success': False, 'message': 'Play ID is required'}), 400

        video_data = get_video_url(play_id)
        if not video_data:
            return jsonify({'success': False, 'message': 'Video not found'}), 404

        return jsonify({
            'success': True,
            'video_url': video_data['video_url'],
            'title': video_data['title'],
            'blurb': video_data['blurb']
        })

    except Exception as e:
        logger.error(f"Error fetching video URL: {str(e)}", exc_info=True)
        return jsonify({'success': False, 'message': str(e)}), 500

if __name__ == '__main__':
    app.run(
        host='0.0.0.0', 
        port=int(os.getenv('BACKEND_PORT', 5000)),
        debug=True,
        use_reloader=False
    )

================
File: backend/auth.py
================
from flask import jsonify, request
import jwt
from datetime import datetime, timezone, timedelta
from functools import wraps
import os
from werkzeug.security import generate_password_hash, check_password_hash
import logging
from flask_sqlalchemy import SQLAlchemy
import random

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

db = SQLAlchemy()

# At the top after imports
print("10. Auth.py imported, directory:", os.getcwd())

class User(db.Model):
    __tablename__ = 'client_info'  # Your existing table name
    
    client_id = db.Column(db.Integer, primary_key=True)  # Simple primary key
    password = db.Column(db.String(256), nullable=False)
    followed_teams = db.Column(db.JSON, default=list)  # Changed from favorite_team
    followed_players = db.Column(db.JSON, default=list)  # Changed from favorite_player
    email = db.Column(db.String(120), unique=True, nullable=False)
    first_name = db.Column(db.String(80), nullable=False)
    last_name = db.Column(db.String(80), nullable=False)
    username = db.Column(db.String(80), unique=True, nullable=False)
    timezone = db.Column(db.String(50), default='UTC')
    avatarurl = db.Column(db.String(200))

    def to_dict(self):
        return {
            'id': self.client_id,
            'email': self.email,
            'firstName': self.first_name,
            'lastName': self.last_name,
            'username': self.username,
            'timezone': self.timezone,
            'avatarUrl': self.avatarurl,
            'preferences': {
                'teams': self.followed_teams or [],  # Changed from favorite_team
                'players': self.followed_players or []  # Changed from favorite_player
            }
        }

    @staticmethod
    def generate_unique_id():
        """Generate a unique client ID between 1 and 10_000"""
        while True:
            new_id = random.randint(1, 10_000)
            # Check if this ID already exists
            if not User.query.filter_by(client_id=new_id).first():
                return new_id

# Get secret key from environment variable or use a default for development
SECRET_KEY = os.getenv('JWT_SECRET_KEY', 'your-secret-key-here')


def token_required(f):
    """Decorator to protect routes that require authentication"""

    @wraps(f)
    def decorated(*args, **kwargs):
        auth_header = request.headers.get('Authorization', None)

        if not auth_header:
            logger.error("No Authorization header provided")
            return jsonify({'success': False, 'message': 'Token is missing'}), 401

        # Check that it starts with 'Bearer '
        parts = auth_header.split()
        if len(parts) != 2 or parts[0].lower() != 'bearer':
            logger.error(f"Invalid Authorization header format: {auth_header}")
            return jsonify({'success': False, 'message': 'Invalid token format'}), 401

        token = parts[1]

        # Optional extra check: ensure token has at least 2 dots
        if token.count('.') != 2:
            logger.error("JWT token does not contain the required 3 segments")
            return jsonify({'success': False, 'message': 'Invalid token structure'}), 401

        # Now try decoding
        try:
            data = jwt.decode(
                token,
                SECRET_KEY,
                algorithms=["HS256"],
                options={"verify_exp": False}
            )
            current_user = User.query.filter_by(client_id=data['user_id']).first()

            if current_user is None:
                logger.error(f"User not found for token user_id: {data.get('user_id')}")
                return jsonify({'success': False, 'message': 'User not found'}), 401

            return f(current_user=current_user, *args, **kwargs)

        except jwt.DecodeError:
            logger.error("Failed to decode JWT token", exc_info=True)
            return jsonify({'success': False, 'message': 'Token decode failed'}), 401
        except Exception as e:
            logger.error(f"Token validation error: {str(e)}", exc_info=True)
            return jsonify({'success': False, 'message': 'Token validation failed'}), 401

    return decorated


class AuthService:
    @staticmethod
    def register_user(data):
        """Register a new user"""
        try:
            logger.info("Starting user registration")
            
            # Check if email already exists
            if User.query.filter_by(email=data['email']).first():
                return {'success': False, 'message': 'Email already registered'}, 409

            # Check if username already exists
            if User.query.filter_by(username=data['username']).first():
                return {'success': False, 'message': 'Username already taken'}, 409

            new_user = User(
                client_id=User.generate_unique_id(),  # Generate unique ID
                email=data['email'],
                password=generate_password_hash(data['password']),
                first_name=data['firstName'],
                last_name=data['lastName'],
                username=data['username'],
                timezone=data.get('timezone', 'UTC'),
                avatarurl=data.get('avatarUrl', '/images/default-avatar.jpg'),
                followed_teams=data.get('teams', []),  # Changed from favorite_team
                followed_players=data.get('players', [])  # Changed from favorite_player
            )

            db.session.add(new_user)
            db.session.commit()

            token = jwt.encode({
                'user_id': new_user.client_id
            }, SECRET_KEY, algorithm="HS256")

            return {
                'success': True,
                'message': 'Registration successful',
                'user': new_user.to_dict(),
                'token': token
            }, 201

        except Exception as e:
            db.session.rollback()
            logger.error(f"Registration error: {str(e)}", exc_info=True)
            return {
                'success': False,
                'message': 'An error occurred during registration.'
            }, 500

    @staticmethod
    def login_user(email, password):
        """Authenticate a user and return a JWT token"""
        try:
            logger.info(f"Login attempt for email: {email}")
            
            if not email or not password:
                logger.error("Missing email or password")
                return {'success': False, 'message': 'Email and password are required'}, 400

            user = User.query.filter_by(email=email).first()
            
            if not user:
                logger.warning(f"No user found with email: {email}")
                return {'success': False, 'message': 'Invalid email or password'}, 401

            if not check_password_hash(user.password, password):
                logger.warning(f"Invalid password for user: {email}")
                return {'success': False, 'message': 'Invalid email or password'}, 401

            # Token without expiration
            token = jwt.encode({
                'user_id': user.client_id
            }, SECRET_KEY, algorithm="HS256")

            logger.info(f"Login successful for user: {email}")

            return {
                'success': True,
                'message': 'Login successful',
                'token': token,
                'user': user.to_dict()
            }, 200

        except Exception as e:
            logger.error(f"Login error: {str(e)}", exc_info=True)
            return {
                'success': False, 
                'message': 'An error occurred during login. Please try again.'
            }, 500

    @staticmethod
    def update_user_profile(user_id, data):
        """Update user profile"""
        try:
            user = db.session.get(User, user_id)
            
            if user is None:
                return {'success': False, 'message': 'User not found'}, 404

            # Don't allow email or password updates through this endpoint
            forbidden_updates = ['email', 'password', 'password_hash', 'id']
            update_data = {k: v for k, v in data.items() 
                          if k not in forbidden_updates}
            
            for key, value in update_data.items():
                setattr(user, key, value)
            
            db.session.commit()
            
            return {'success': True, 'user': user.to_dict()}, 200

        except Exception as e:
            db.session.rollback()
            logger.error(f"Error in update_user_profile: {str(e)}", exc_info=True)
            return {'success': False, 'message': str(e)}, 500

# Initialize with a default admin user if no users exist
def init_admin():
    try:
        if not User.query.first():
            admin_user = User(
                email='admin@example.com',
                password_hash=generate_password_hash('admin123'),
                firstName='Admin',
                lastName='User',
                username='admin'
            )
            db.session.add(admin_user)
            db.session.commit()
            logger.info("Initialized default admin user")
    except Exception as e:
        db.session.rollback()
        logger.error(f"Error creating admin user: {str(e)}")

================
File: backend/cfknn.py
================
import pandas as pd
import numpy as np
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import joblib
import os
from sqlalchemy import create_engine
from db import load_data

# Global variables to cache the model and matrix
_cached_model = None
_cached_matrix = None

def build_and_save_model(user_reel_matrix, model_path='knn_model.pkl'):
    user_reel_matrix = user_reel_matrix.astype(float)
    user_reel_matrix_sparse = csr_matrix(user_reel_matrix.values)  
    model_knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=10, n_jobs=-1)
    model_knn.fit(user_reel_matrix_sparse)
    joblib.dump((model_knn, user_reel_matrix), model_path)
    print(f"Model trained and saved to {model_path}")
    return model_knn, user_reel_matrix

def get_cached_model(model_path='knn_model.pkl'):
    """Get model from cache or build it if not exists"""
    global _cached_model, _cached_matrix
    
    if _cached_model is not None and _cached_matrix is not None:
        print("Using cached model")
        return _cached_model, _cached_matrix
        
    # Try to load from file
    abs_model_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), model_path)
    if os.path.exists(abs_model_path):
        print(f"Loading model from {abs_model_path}...")
        _cached_model, _cached_matrix = joblib.load(abs_model_path)
        return _cached_model, _cached_matrix
    else:
        print("Model not found, building new model...")
        # Load data and build model
        ratings = load_data('user_ratings_db')
        if ratings is None:
            return None, None
            
        user_reel_matrix = ratings.pivot_table(
            index='user_id', 
            columns='reel_id', 
            values='rating', 
            fill_value=0
        )
        _cached_model, _cached_matrix = build_and_save_model(user_reel_matrix, model_path)
        return _cached_model, _cached_matrix

def recommend_reels(user_id, model_knn, user_reel_matrix, num_recommendations=5, offset=0):
    """Get recommendations for a user"""
    try:
        print(f"Recommending reels for user {user_id}, offset: {offset}, limit: {num_recommendations}")
        user_index = user_reel_matrix.index.get_loc(user_id)

        print(user_id)
        
        # Get similar users
        distances, indices = model_knn.kneighbors(
            user_reel_matrix.iloc[user_index, :].values.reshape(1, -1),
            n_neighbors=20  # Increased for more recommendations
        )
        
        # Calculate scores for all reels
        reel_scores = {}
        for i in indices[0]:
            if i == user_index:
                continue
            for reel_id in user_reel_matrix.columns:
                if user_reel_matrix.iloc[user_index][reel_id] == 0:
                    reel_scores[reel_id] = reel_scores.get(reel_id, 0) + user_reel_matrix.iloc[i][reel_id]

        # Sort recommendations by score
        recommended_reels = sorted(reel_scores.items(), key=lambda x: x[1], reverse=True)
        
        # Apply pagination
        start_idx = offset
        end_idx = min(offset + num_recommendations, len(recommended_reels))
        paginated_reels = recommended_reels[start_idx:end_idx]
        
        has_more = end_idx < len(recommended_reels)
        print(f"Found {len(recommended_reels)} total recommendations, returning {len(paginated_reels)} items, has_more: {has_more}")
        
        return [{"reel_id": reel_id, "predicted_score": score} for reel_id, score in paginated_reels], has_more
        
    except Exception as e:
        print(f"Error in recommend_reels: {str(e)}")
        return [], False

def run_main(table, user_id=10, num_recommendations=3, offset=0, model_path='knn_model.pkl'):
    ratings = load_data(table)
    if ratings is None:
        return []
    user_reel_matrix = ratings.pivot_table(index='user_id', columns='reel_id', values='rating', fill_value=0)

    model_knn, user_reel_matrix_loaded = get_cached_model(model_path)
    if model_knn is None:
        print("Model not found, building new model...")
        model_knn, user_reel_matrix_loaded = build_and_save_model(user_reel_matrix, model_path)

    recommendations, has_more = recommend_reels(
        user_id, 
        model_knn, 
        user_reel_matrix_loaded, 
        num_recommendations,
        offset
    )
    return recommendations, has_more

#run_main(table)

================
File: backend/Dockerfile
================
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_ENV=development
ENV PYTHONUNBUFFERED=1

EXPOSE 5000

CMD ["flask", "run", "--host=0.0.0.0"]

================
File: backend/gemini.py
================
import os
from dotenv import load_dotenv
from google import genai
from google.genai import types
import logging
import google.generativeai as genai
import os
from auth import AuthService, token_required, db, init_admin

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
api_key = os.getenv('GOOGLE_API_KEY')
if not api_key:
    logger.error("No GOOGLE_API_KEY found in environment variables")
    raise ValueError("GOOGLE_API_KEY is required")

def run_gemini_prompt(prompt):
    try:
        logger.info(f"Running prompt: {prompt[:50]}...")
        client = genai.Client(api_key=api_key)
        
        search_tool = {'google_search': {}}
        
        response = client.models.generate_content(
            model='gemini-2.0-flash-exp',
            contents=prompt,
            config=types.GenerateContentConfig(
                tools=[search_tool],
                response_modalities=["TEXT"],
            )
        )
        return response.text.strip()
    except Exception as e:
        logger.error(f"Error running Gemini prompt: {str(e)}", exc_info=True)
        return None

def generate_embeddings(text):
    try:
        logger.info(f"Generating embeddings for text: {text[:50]}...")

        genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
        result = genai.embed_content(
                model="models/text-embedding-004",
                content="What is the meaning of life?")

        embedded = result['embedding']
        logger.info(f"Embeddings generated successfully: {embedded}...")
        return embedded
    except Exception as e:
        logger.error(f"Error generating embeddings: {str(e)}", exc_info=True)
        return None

@token_required
def query_embedding(current_user):
    followed_teams = [team.get('name', '') for team in (current_user.followed_teams or [])]
    followed_players = [player.get('fullName', '') for player in (current_user.followed_players or [])]
    query = f"Followed Teams: {', '.join(followed_teams)}. Followed Players: {', '.join(followed_players)}."
    return generate_embeddings(query)

================
File: backend/news_digest.py
================
import os
# pip install -U -q google-genai
# pip install python-dotenv
from dotenv import load_dotenv
from google import genai
from google.genai import types
import logging
from bs4 import BeautifulSoup
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
api_key = os.getenv('GOOGLE_API_KEY')
if not api_key:
    logger.error("No GOOGLE_API_KEY found in environment variables")
    raise ValueError("GOOGLE_API_KEY is required")

def get_news_digest(teams=None, players=None):
    """
    Generate news digests for multiple MLB teams and players using Gemini API with search
    """
    logger.info(f"Received request for teams: {teams}, players: {players}")
    
    try:
        # Validate inputs
        if teams is None and players is None:
            return {
                'success': False,
                'error': 'At least one team or player must be specified'
            }
        
        if (teams is not None and len(teams) == 0) and (players is not None and len(players) == 0):
            return {
                'success': False,
                'error': 'Empty teams and players lists provided'
            }

        # Create a client with search capability
        client = genai.Client(api_key=api_key)
        
        # Configure search tool
        search_tool = {'google_search': {}}
        
        digests = []
        
        # Generate content for teams
        if teams:
            logger.info(f"Generating content for teams: {teams}")
            for team in teams[:3]:  # Limit to 3 teams
                prompt = f"""
                Generate a concise MLB update focusing on {team}. Include:

                # Team Update
                - Current standings
                - Recent performance
                - Key statistics

                # Looking Ahead
                - Upcoming games
                - Key matchups
                - Potential milestones

                Format in markdown, use bullet points, and bold (**) key numbers. Remove any introductory phrases and start directly with the content.
                """

                response = client.models.generate_content(
                    model='gemini-2.0-flash-exp',
                    contents=prompt,
                    config=types.GenerateContentConfig(
                        tools=[search_tool],
                        response_modalities=["TEXT"],
                    )
                )
                
                digests.append({
                    'type': 'team',
                    'subject': team,
                    'content': clean_content(response.text),
                    'sources': get_search_content(response)
                })

        # Generate content for players
        if players:
            logger.info(f"Generating content for players: {players}")
            for player in players[:3]:  # Limit to 3 players
                prompt = f"""
                Generate a concise MLB player spotlight for {player}. Include:

                # Player Spotlight
                - Recent performance
                - Season statistics
                - Notable achievements
                - Upcoming milestones

                Format in markdown, use bullet points, and bold (**) key numbers. Remove any introductory phrases and start directly with the content.
                """

                response = client.models.generate_content(
                    model='gemini-2.0-flash-exp',
                    contents=prompt,
                    config=types.GenerateContentConfig(
                        tools=[search_tool],
                        response_modalities=["TEXT"],
                    )
                )
                
                digests.append({
                    'type': 'player',
                    'subject': player,
                    'content': clean_content(response.text),
                    'sources': get_search_content(response)
                })

        if not digests:
            return {
                'success': False,
                'error': 'No content could be generated'
            }

        logger.info(f"Generated {len(digests)} digests successfully")
        return {
            'success': True,
            'digests': digests,
            'timestamp': datetime.now().isoformat()
        }

    except Exception as e:
        logger.error(f"Error generating news digest: {str(e)}", exc_info=True)
        return {
            'success': False,
            'error': str(e)
        }

def clean_content(content):
    """Clean up the response text by removing introductory phrases"""
    intro_phrases = [
        "Here's the requested information",
        "Based on the latest information",
        "Here's a summary",
        "Let me provide you with",
        "Here's what I found",
        "Using real-time search",
        "Based on real-time data",
        "Here's the current information"
    ]
    
    for phrase in intro_phrases:
        if content.lower().startswith(phrase.lower()):
            content = content[len(phrase):].lstrip(',:.\n ')
    
    return content

def get_search_content(response):
    """Extract search content from response"""
    if hasattr(response.candidates[0], 'grounding_metadata') and \
       hasattr(response.candidates[0].grounding_metadata, 'search_entry_point'):
        return response.candidates[0].grounding_metadata.search_entry_point.rendered_content
    return "Generated using Google Gemini AI with web search"

def clean_source_links(sources_html):
    """Clean and extract source links from Google's HTML"""
    soup = BeautifulSoup(sources_html, 'html.parser')
    links = soup.select('a.chip')
    
    cleaned_sources = []
    for link in links:
        cleaned_sources.append({
            'text': link.get_text(),
            'url': link.get('href')
        })
    
    return cleaned_sources

================
File: backend/requirements.txt
================
# Flask and extensions
flask==1.1.4
werkzeug==1.0.1
flask-cors==3.0.10
flask-restx==0.4.0
flask-sqlalchemy>=2.5.1,<3.0.0
flask-migrate==2.7.0
flask-script==2.0.6

# Database and Cloud SQL
cloud-sql-python-connector==1.2.0
pg8000==1.29.8
SQLAlchemy>=1.4.46,<2.0.0
psycopg2-binary==2.9.9

# Google Cloud
google-cloud-translate>=3.0.0
google-generativeai==0.8.4

# JWT for authentication
PyJWT==2.8.0

# Utilities
python-dotenv==1.0.0
requests==2.31.0
markupsafe==2.0.1
Jinja2==2.11.3

# Testing
pytest==7.4.0
pytest-cov==4.1.0

#ML configs
scikit-learn
pandas
numpy

================
File: backend/routes/mlb.py
================
from flask import Blueprint, jsonify
import requests
import logging

logger = logging.getLogger(__name__)
mlb = Blueprint('mlb', __name__)

@mlb.route('/api/mlb/teams')
def get_teams():
    try:
        logger.info("Fetching MLB teams...")
        response = requests.get('https://statsapi.mlb.com/api/v1/teams?sportId=1')
        response.raise_for_status()
        data = response.json()
        logger.info(f"Successfully fetched {len(data.get('teams', []))} teams")
        return jsonify(data)
    except requests.RequestException as e:
        logger.error(f"Error fetching teams: {str(e)}")
        return jsonify({'error': str(e)}), 500
    except Exception as e:
        logger.error(f"Error fetching teams: {str(e)}")
        return jsonify({'error': str(e)}), 500

@mlb.route('/api/mlb/roster/<int:team_id>')
def get_roster(team_id):
    try:
        logger.info(f"Fetching roster for team {team_id}...")
        response = requests.get(
            f'https://statsapi.mlb.com/api/v1/teams/{team_id}/roster?season=2024'
        )
        response.raise_for_status()
        data = response.json()
        logger.info(f"Successfully fetched roster with {len(data.get('roster', []))} players")
        return jsonify(data)
    except requests.RequestException as e:
        logger.error(f"Error fetching roster: {str(e)}")
        return jsonify({'error': str(e)}), 500
    except Exception as e:
        logger.error(f"Error fetching roster: {str(e)}")
        return jsonify({'error': str(e)}), 500

================
File: backend/train.py
================
import pandas as pd
import numpy as np
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import joblib
import os

def load_data():
    column_names = ['user_id', 'highlight_id', 'rating']
    ratings = pd.read_csv('mlb.csv', names=column_names, skiprows=1)
    return ratings

def build_and_save_model(user_play_matrix, model_path='knn_model.pkl'):
    user_play_matrix = user_play_matrix.astype(float)
    user_play_matrix_sparse = csr_matrix(user_play_matrix.values)  
    model_knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=10, n_jobs=-1)
    model_knn.fit(user_play_matrix_sparse)
    joblib.dump((model_knn, user_play_matrix), model_path)
    print(f"Model trained and saved to {model_path}")
    return model_knn, user_play_matrix

def load_model(model_path='knn_model.pkl'):
    if os.path.exists(model_path):
        print(f"Loading model from {model_path}...")
        model_knn, user_play_matrix = joblib.load(model_path)
        return model_knn, user_play_matrix
    else:
        print(f"Model not found at {model_path}. Please train the model first.")
        return None, None

def recommend_plays(user_id, model_knn, user_play_matrix, num_recommendations=5):
    user_index = user_id - 1  
    distances, indices = model_knn.kneighbors(user_play_matrix.iloc[user_index, :].values.reshape(1, -1), n_neighbors=10)
    similar_users = indices.flatten()
    play_scores = {}

    for i in similar_users:
        for play_id in user_play_matrix.columns:
            if user_play_matrix.iloc[user_index][play_id] == 0:  
                play_scores[play_id] = play_scores.get(play_id, 0) + user_play_matrix.iloc[i][play_id]

    recommended_plays = sorted(play_scores.items(), key=lambda x: x[1], reverse=True)[:num_recommendations]
    print(f"Top {num_recommendations} play recommendations for User {user_id}:")
    for play_id, score in recommended_plays:
        print(f"Play ID: {play_id}, Predicted Score: {score}")

def main():
    ratings = load_data()
    user_play_matrix = ratings.pivot_table(index='user_id', columns='highlight_id', values='rating', fill_value=0)
    
    model_path = 'knn_model.pkl'
    model_knn, user_play_matrix_loaded = load_model(model_path)
    if model_knn is None:
        model_knn, user_play_matrix_loaded = build_and_save_model(user_play_matrix, model_path)

    user_id = 10  
    num_recommendations = 5
    recommend_plays(user_id, model_knn, user_play_matrix_loaded, num_recommendations)

if __name__ == "__main__":
    main()

================
File: docker-compose.yml
================
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    volumes:
      - frontend_node_modules:/app/node_modules
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:5000
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - backend_data:/app
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py
      - FLASK_DEBUG=1
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CORS_ORIGIN=http://localhost:3000
    networks:
      - app-network
    restart: unless-stopped
    command: flask run --host=0.0.0.0

networks:
  app-network:
    driver: bridge

volumes:
  frontend_node_modules:
  backend_data:

================
File: frontend/__mocks__/fileMock.js
================
module.exports = 'test-file-stub';

================
File: frontend/.dockerignore
================
node_modules
build
.git
.gitignore
.env
*.log

================
File: frontend/.env.example
================
# API Configuration
REACT_APP_BACKEND_URL=http://localhost:5000

# Environment
REACT_APP_ENV=development

# Feature flags
REACT_APP_ENABLE_VIDEO_HIGHLIGHTS=true
REACT_APP_ENABLE_ANALYTICS=false

================
File: frontend/coverage/clover.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<coverage generated="1736366202931" clover="3.2.0">
  <project timestamp="1736366202931" name="All files">
    <metrics statements="93" coveredstatements="82" conditionals="68" coveredconditionals="56" methods="35" coveredmethods="28" elements="196" coveredelements="166" complexity="0" loc="93" ncloc="93" packages="1" files="1" classes="1"/>
    <file name="TeamPlayerSelector.js" path="C:\Users\yangc\Documents\GitHub\GoatSquad\frontend\src\components\TeamPlayerSelector.js">
      <metrics statements="93" coveredstatements="82" conditionals="68" coveredconditionals="56" methods="35" coveredmethods="28"/>
      <line num="6" count="39" type="stmt"/>
      <line num="7" count="39" type="stmt"/>
      <line num="8" count="39" type="stmt"/>
      <line num="9" count="39" type="stmt"/>
      <line num="10" count="39" type="stmt"/>
      <line num="11" count="39" type="stmt"/>
      <line num="12" count="39" type="stmt"/>
      <line num="13" count="39" type="stmt"/>
      <line num="16" count="39" type="stmt"/>
      <line num="17" count="11" type="stmt"/>
      <line num="18" count="11" type="stmt"/>
      <line num="19" count="11" type="stmt"/>
      <line num="20" count="11" type="stmt"/>
      <line num="21" count="11" type="stmt"/>
      <line num="22" count="11" type="stmt"/>
      <line num="23" count="10" type="stmt"/>
      <line num="25" count="10" type="cond" truecount="3" falsecount="1"/>
      <line num="26" count="10" type="stmt"/>
      <line num="27" count="10" type="stmt"/>
      <line num="28" count="10" type="stmt"/>
      <line num="30" count="0" type="stmt"/>
      <line num="33" count="1" type="stmt"/>
      <line num="34" count="1" type="cond" truecount="1" falsecount="1"/>
      <line num="35" count="1" type="stmt"/>
      <line num="37" count="11" type="stmt"/>
      <line num="41" count="11" type="stmt"/>
      <line num="45" count="39" type="stmt"/>
      <line num="46" count="6" type="cond" truecount="3" falsecount="1"/>
      <line num="48" count="6" type="stmt"/>
      <line num="49" count="6" type="stmt"/>
      <line num="50" count="6" type="stmt"/>
      <line num="51" count="6" type="stmt"/>
      <line num="52" count="5" type="stmt"/>
      <line num="54" count="4" type="cond" truecount="3" falsecount="1"/>
      <line num="55" count="4" type="stmt"/>
      <line num="60" count="0" type="stmt"/>
      <line num="63" count="1" type="stmt"/>
      <line num="64" count="1" type="stmt"/>
      <line num="69" count="5" type="stmt"/>
      <line num="74" count="39" type="stmt"/>
      <line num="75" count="16" type="cond" truecount="2" falsecount="0"/>
      <line num="76" count="5" type="stmt"/>
      <line num="81" count="39" type="stmt"/>
      <line num="82" count="15" type="cond" truecount="1" falsecount="1"/>
      <line num="83" count="15" type="cond" truecount="2" falsecount="0"/>
      <line num="84" count="15" type="stmt"/>
      <line num="85" count="10" type="stmt"/>
      <line num="90" count="39" type="stmt"/>
      <line num="91" count="0" type="stmt"/>
      <line num="92" count="0" type="stmt"/>
      <line num="93" count="0" type="cond" truecount="0" falsecount="2"/>
      <line num="95" count="0" type="stmt"/>
      <line num="99" count="39" type="stmt"/>
      <line num="100" count="36" type="stmt"/>
      <line num="102" count="36" type="stmt"/>
      <line num="103" count="36" type="stmt"/>
      <line num="104" count="1" type="stmt"/>
      <line num="105" count="1" type="stmt"/>
      <line num="107" count="36" type="stmt"/>
      <line num="110" count="36" type="stmt"/>
      <line num="113" count="39" type="stmt"/>
      <line num="114" count="2" type="stmt"/>
      <line num="115" count="2" type="stmt"/>
      <line num="117" count="2" type="cond" truecount="2" falsecount="0"/>
      <line num="119" count="1" type="stmt"/>
      <line num="120" count="1" type="cond" truecount="1" falsecount="1"/>
      <line num="121" count="1" type="stmt"/>
      <line num="123" count="1" type="cond" truecount="1" falsecount="1"/>
      <line num="125" count="1" type="stmt"/>
      <line num="126" count="1" type="cond" truecount="1" falsecount="1"/>
      <line num="127" count="1" type="stmt"/>
      <line num="132" count="39" type="cond" truecount="4" falsecount="0"/>
      <line num="133" count="12" type="stmt"/>
      <line num="145" count="27" type="cond" truecount="4" falsecount="0"/>
      <line num="146" count="1" type="stmt"/>
      <line num="156" count="0" type="stmt"/>
      <line num="157" count="0" type="stmt"/>
      <line num="170" count="26" type="stmt"/>
      <line num="188" count="2" type="stmt"/>
      <line num="196" count="0" type="stmt"/>
      <line num="206" count="5" type="stmt"/>
      <line num="236" count="20" type="stmt"/>
      <line num="239" count="19" type="stmt"/>
      <line num="240" count="19" type="stmt"/>
      <line num="243" count="1" type="stmt"/>
      <line num="257" count="0" type="stmt"/>
      <line num="258" count="0" type="stmt"/>
      <line num="295" count="5" type="cond" truecount="1" falsecount="1"/>
      <line num="302" count="32" type="stmt"/>
      <line num="323" count="5" type="stmt"/>
      <line num="325" count="1" type="stmt"/>
      <line num="326" count="1" type="stmt"/>
      <line num="328" count="1" type="cond" truecount="2" falsecount="0"/>
    </file>
  </project>
</coverage>

================
File: frontend/coverage/lcov-report/base.css
================
body, html {
  margin:0; padding: 0;
  height: 100%;
}
body {
    font-family: Helvetica Neue, Helvetica, Arial;
    font-size: 14px;
    color:#333;
}
.small { font-size: 12px; }
*, *:after, *:before {
  -webkit-box-sizing:border-box;
     -moz-box-sizing:border-box;
          box-sizing:border-box;
  }
h1 { font-size: 20px; margin: 0;}
h2 { font-size: 14px; }
pre {
    font: 12px/1.4 Consolas, "Liberation Mono", Menlo, Courier, monospace;
    margin: 0;
    padding: 0;
    -moz-tab-size: 2;
    -o-tab-size:  2;
    tab-size: 2;
}
a { color:#0074D9; text-decoration:none; }
a:hover { text-decoration:underline; }
.strong { font-weight: bold; }
.space-top1 { padding: 10px 0 0 0; }
.pad2y { padding: 20px 0; }
.pad1y { padding: 10px 0; }
.pad2x { padding: 0 20px; }
.pad2 { padding: 20px; }
.pad1 { padding: 10px; }
.space-left2 { padding-left:55px; }
.space-right2 { padding-right:20px; }
.center { text-align:center; }
.clearfix { display:block; }
.clearfix:after {
  content:'';
  display:block;
  height:0;
  clear:both;
  visibility:hidden;
  }
.fl { float: left; }
@media only screen and (max-width:640px) {
  .col3 { width:100%; max-width:100%; }
  .hide-mobile { display:none!important; }
}

.quiet {
  color: #7f7f7f;
  color: rgba(0,0,0,0.5);
}
.quiet a { opacity: 0.7; }

.fraction {
  font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;
  font-size: 10px;
  color: #555;
  background: #E8E8E8;
  padding: 4px 5px;
  border-radius: 3px;
  vertical-align: middle;
}

div.path a:link, div.path a:visited { color: #333; }
table.coverage {
  border-collapse: collapse;
  margin: 10px 0 0 0;
  padding: 0;
}

table.coverage td {
  margin: 0;
  padding: 0;
  vertical-align: top;
}
table.coverage td.line-count {
    text-align: right;
    padding: 0 5px 0 20px;
}
table.coverage td.line-coverage {
    text-align: right;
    padding-right: 10px;
    min-width:20px;
}

table.coverage td span.cline-any {
    display: inline-block;
    padding: 0 5px;
    width: 100%;
}
.missing-if-branch {
    display: inline-block;
    margin-right: 5px;
    border-radius: 3px;
    position: relative;
    padding: 0 4px;
    background: #333;
    color: yellow;
}

.skip-if-branch {
    display: none;
    margin-right: 10px;
    position: relative;
    padding: 0 4px;
    background: #ccc;
    color: white;
}
.missing-if-branch .typ, .skip-if-branch .typ {
    color: inherit !important;
}
.coverage-summary {
  border-collapse: collapse;
  width: 100%;
}
.coverage-summary tr { border-bottom: 1px solid #bbb; }
.keyline-all { border: 1px solid #ddd; }
.coverage-summary td, .coverage-summary th { padding: 10px; }
.coverage-summary tbody { border: 1px solid #bbb; }
.coverage-summary td { border-right: 1px solid #bbb; }
.coverage-summary td:last-child { border-right: none; }
.coverage-summary th {
  text-align: left;
  font-weight: normal;
  white-space: nowrap;
}
.coverage-summary th.file { border-right: none !important; }
.coverage-summary th.pct { }
.coverage-summary th.pic,
.coverage-summary th.abs,
.coverage-summary td.pct,
.coverage-summary td.abs { text-align: right; }
.coverage-summary td.file { white-space: nowrap;  }
.coverage-summary td.pic { min-width: 120px !important;  }
.coverage-summary tfoot td { }

.coverage-summary .sorter {
    height: 10px;
    width: 7px;
    display: inline-block;
    margin-left: 0.5em;
    background: url(sort-arrow-sprite.png) no-repeat scroll 0 0 transparent;
}
.coverage-summary .sorted .sorter {
    background-position: 0 -20px;
}
.coverage-summary .sorted-desc .sorter {
    background-position: 0 -10px;
}
.status-line {  height: 10px; }
/* yellow */
.cbranch-no { background: yellow !important; color: #111; }
/* dark red */
.red.solid, .status-line.low, .low .cover-fill { background:#C21F39 }
.low .chart { border:1px solid #C21F39 }
.highlighted,
.highlighted .cstat-no, .highlighted .fstat-no, .highlighted .cbranch-no{
  background: #C21F39 !important;
}
/* medium red */
.cstat-no, .fstat-no, .cbranch-no, .cbranch-no { background:#F6C6CE }
/* light red */
.low, .cline-no { background:#FCE1E5 }
/* light green */
.high, .cline-yes { background:rgb(230,245,208) }
/* medium green */
.cstat-yes { background:rgb(161,215,106) }
/* dark green */
.status-line.high, .high .cover-fill { background:rgb(77,146,33) }
.high .chart { border:1px solid rgb(77,146,33) }
/* dark yellow (gold) */
.status-line.medium, .medium .cover-fill { background: #f9cd0b; }
.medium .chart { border:1px solid #f9cd0b; }
/* light yellow */
.medium { background: #fff4c2; }

.cstat-skip { background: #ddd; color: #111; }
.fstat-skip { background: #ddd; color: #111 !important; }
.cbranch-skip { background: #ddd !important; color: #111; }

span.cline-neutral { background: #eaeaea; }

.coverage-summary td.empty {
    opacity: .5;
    padding-top: 4px;
    padding-bottom: 4px;
    line-height: 1;
    color: #888;
}

.cover-fill, .cover-empty {
  display:inline-block;
  height: 12px;
}
.chart {
  line-height: 0;
}
.cover-empty {
    background: white;
}
.cover-full {
    border-right: none !important;
}
pre.prettyprint {
    border: none !important;
    padding: 0 !important;
    margin: 0 !important;
}
.com { color: #999 !important; }
.ignore-none { color: #999; font-weight: normal; }

.wrapper {
  min-height: 100%;
  height: auto !important;
  height: 100%;
  margin: 0 auto -48px;
}
.footer, .push {
  height: 48px;
}

================
File: frontend/coverage/lcov-report/block-navigation.js
================
/* eslint-disable */
var jumpToCode = (function init() {
    // Classes of code we would like to highlight in the file view
    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];

    // Elements to highlight in the file listing view
    var fileListingElements = ['td.pct.low'];

    // We don't want to select elements that are direct descendants of another match
    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `

    // Selecter that finds elements on the page to which we can jump
    var selector =
        fileListingElements.join(', ') +
        ', ' +
        notSelector +
        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`

    // The NodeList of matching elements
    var missingCoverageElements = document.querySelectorAll(selector);

    var currentIndex;

    function toggleClass(index) {
        missingCoverageElements
            .item(currentIndex)
            .classList.remove('highlighted');
        missingCoverageElements.item(index).classList.add('highlighted');
    }

    function makeCurrent(index) {
        toggleClass(index);
        currentIndex = index;
        missingCoverageElements.item(index).scrollIntoView({
            behavior: 'smooth',
            block: 'center',
            inline: 'center'
        });
    }

    function goToPrevious() {
        var nextIndex = 0;
        if (typeof currentIndex !== 'number' || currentIndex === 0) {
            nextIndex = missingCoverageElements.length - 1;
        } else if (missingCoverageElements.length > 1) {
            nextIndex = currentIndex - 1;
        }

        makeCurrent(nextIndex);
    }

    function goToNext() {
        var nextIndex = 0;

        if (
            typeof currentIndex === 'number' &&
            currentIndex < missingCoverageElements.length - 1
        ) {
            nextIndex = currentIndex + 1;
        }

        makeCurrent(nextIndex);
    }

    return function jump(event) {
        if (
            document.getElementById('fileSearch') === document.activeElement &&
            document.activeElement != null
        ) {
            // if we're currently focused on the search input, we don't want to navigate
            return;
        }

        switch (event.which) {
            case 78: // n
            case 74: // j
                goToNext();
                break;
            case 66: // b
            case 75: // k
            case 80: // p
                goToPrevious();
                break;
        }
    };
})();
window.addEventListener('keydown', jumpToCode);

================
File: frontend/coverage/lcov-report/index.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for All files</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1>All files</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.65% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>87/104</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">82.35% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>56/68</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">80% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>28/35</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">88.17% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>82/93</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="TeamPlayerSelector.js"><a href="TeamPlayerSelector.js.html">TeamPlayerSelector.js</a></td>
	<td data-value="83.65" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 83%"></div><div class="cover-empty" style="width: 17%"></div></div>
	</td>
	<td data-value="83.65" class="pct high">83.65%</td>
	<td data-value="104" class="abs high">87/104</td>
	<td data-value="82.35" class="pct high">82.35%</td>
	<td data-value="68" class="abs high">56/68</td>
	<td data-value="80" class="pct high">80%</td>
	<td data-value="35" class="abs high">28/35</td>
	<td data-value="88.17" class="pct high">88.17%</td>
	<td data-value="93" class="abs high">82/93</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-01-08T19:56:42.920Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>

================
File: frontend/coverage/lcov-report/prettify.css
================
.pln{color:#000}@media screen{.str{color:#080}.kwd{color:#008}.com{color:#800}.typ{color:#606}.lit{color:#066}.pun,.opn,.clo{color:#660}.tag{color:#008}.atn{color:#606}.atv{color:#080}.dec,.var{color:#606}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun,.opn,.clo{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:2px;border:1px solid #888}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}

================
File: frontend/coverage/lcov-report/prettify.js
================
/* eslint-disable */
window.PR_SHOULD_USE_CONTINUATION=true;(function(){var h=["break,continue,do,else,for,if,return,while"];var u=[h,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"];var p=[u,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"];var l=[p,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"];var x=[p,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"];var R=[x,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"];var r="all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes";var w=[p,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"];var s="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END";var I=[h,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"];var f=[h,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"];var H=[h,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"];var A=[l,R,w,s+I,f,H];var e=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/;var C="str";var z="kwd";var j="com";var O="typ";var G="lit";var L="pun";var F="pln";var m="tag";var E="dec";var J="src";var P="atn";var n="atv";var N="nocode";var M="(?:^^\\.?|[+-]|\\!|\\!=|\\!==|\\#|\\%|\\%=|&|&&|&&=|&=|\\(|\\*|\\*=|\\+=|\\,|\\-=|\\->|\\/|\\/=|:|::|\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\@|\\[|\\^|\\^=|\\^\\^|\\^\\^=|\\{|\\||\\|=|\\|\\||\\|\\|=|\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*";function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,""))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if("0"<=af&&af<="7"){return parseInt(ah.substring(1),8)}else{if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?"\\x0":"\\x")+af.toString(16)}var ag=String.fromCharCode(af);if(ag==="\\"||ag==="-"||ag==="["||ag==="]"){ag="\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g"));var ak=[];var af=[];var ao=aq[0]==="^";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&"-"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=["["];if(ao){an.push("^")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push("-")}an.push(T(at[1]))}}an.push("]");return an.join("")}function W(al){var aj=al.source.match(new RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag==="("){++am}else{if("\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag==="("){++am;if(an[am]===undefined){aj[ak]="(?:"}}else{if("\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]="\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if("^"===aj[ak]&&"^"!==aj[ak+1]){aj[ak]=""}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai==="["){aj[ak]=X(ag)}else{if(ai!=="\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return"["+String.fromCharCode(ap&~32,ap|32)+"]"})}}}}return aj.join("")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(""+ae)}aa.push("(?:"+W(ae)+")")}return new RegExp(aa.join("|"),ac?"gi":"g")}function a(V){var U=/(?:^|\s)nocode(?:\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}}var Y=S&&"pre"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if("BR"===ad||"LI"===ad){X[W]="\n";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \t\r\n]+/g," ")}else{ac=ac.replace(/\r\n?/g,"\n")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join("").replace(/\n$/,""),spans:Z}}function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}var v=/\S/;function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=""+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\0-\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap==="string"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&"lang-"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]==="string")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""])}else{if(T.multiLineStrings){W.push([C,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"])}else{W.push([C,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"])}}if(T.verbatimStrings){S.push([C,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"])}S.push([C,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/,null])}else{W.push([j,/^#[^\r\n]*/,null,"#"])}}if(T.cStyleComments){S.push([j,/^\/\/[^\r\n]*/,null]);S.push([j,/^\/\*[\s\S]*?(?:\*\/|$)/,null])}if(T.regexLiterals){var X=("/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/");S.push(["lang-regex",new RegExp("^"+M+"("+X+")")])}var V=T.types;if(V){S.push([O,V])}var U=(""+T.keywords).replace(/^ | $/g,"");if(U.length){S.push([z,new RegExp("^(?:"+U.replace(/[\s,]+/g,"|")+")\\b"),null])}W.push([F,/^\s+/,null," \r\n\t\xA0"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[F,/^\\[\s\S]?/,null],[L,/^.[^\s\w\.$@\'\"\`\/\#\\]*/,null]);return g(W,S)}var K=i({keywords:A,hashComments:true,cStyleComments:true,multiLineStrings:true,regexLiterals:true});function Q(V,ag){var U=/(?:^|\s)nocode(?:\s|$)/;var ab=/\r\n?|\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}}var Z=S&&"pre"===S.substring(0,3);var af=ac.createElement("LI");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if("BR"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute("value",ag)}var aa=ac.createElement("OL");aa.className="linenums";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className="L"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode("\xA0"))}aa.appendChild(af)}V.appendChild(aa)}function D(ac){var aj=/\bMSIE\b/.test(navigator.userAgent);var am=/\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,"\r")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement("SPAN");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}var t={};function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn("cannot override language handler %s",T)}}}}function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\s*</.test(S)?"default-markup":"default-code"}return t[T]}c(K,["default-code"]);c(g([],[[F,/^[^<?]+/],[E,/^<!\w[^>]*(?:>|$)/],[j,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[L,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);c(g([[F,/^[\s]+/,null," \t\r\n"],[n,/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[[m,/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],[P,/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[L,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]);c(g([],[[n,/^[\s\S]+/]]),["uq.val"]);c(i({keywords:l,hashComments:true,cStyleComments:true,types:e}),["c","cc","cpp","cxx","cyc","m"]);c(i({keywords:"null,true,false"}),["json"]);c(i({keywords:R,hashComments:true,cStyleComments:true,verbatimStrings:true,types:e}),["cs"]);c(i({keywords:x,cStyleComments:true}),["java"]);c(i({keywords:H,hashComments:true,multiLineStrings:true}),["bsh","csh","sh"]);c(i({keywords:I,hashComments:true,multiLineStrings:true,tripleQuotedStrings:true}),["cv","py"]);c(i({keywords:s,hashComments:true,multiLineStrings:true,regexLiterals:true}),["perl","pl","pm"]);c(i({keywords:f,hashComments:true,multiLineStrings:true,regexLiterals:true}),["rb"]);c(i({keywords:w,cStyleComments:true,regexLiterals:true}),["js"]);c(i({keywords:r,hashComments:3,cStyleComments:true,multilineStrings:true,tripleQuotedStrings:true,regexLiterals:true}),["coffee"]);c(g([],[[C,/^[\s\S]+/]]),["regex"]);function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if("console" in window){console.log(W&&W.stack?W.stack:W)}}}function y(W,V,U){var S=document.createElement("PRE");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y("pre"),Y("code"),Y("xmp")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\blang(?:uage)?-([\w.]+)(?!\S)/;var ae=/\bprettyprint\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf("prettyprint")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&"CODE"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName==="pre"||ak.tagName==="code"||ak.tagName==="xmp")&&ak.className&&ak.className.indexOf("prettyprint")>=0){al=true;break}}if(!al){var af=aj.className.match(/\blinenums\b(?::(\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}window.prettyPrintOne=y;window.prettyPrint=b;window.PR={createSimpleLexer:g,registerLangHandler:c,sourceDecorator:i,PR_ATTRIB_NAME:P,PR_ATTRIB_VALUE:n,PR_COMMENT:j,PR_DECLARATION:E,PR_KEYWORD:z,PR_LITERAL:G,PR_NOCODE:N,PR_PLAIN:F,PR_PUNCTUATION:L,PR_SOURCE:J,PR_STRING:C,PR_TAG:m,PR_TYPE:O}})();PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_DECLARATION,/^<!\w[^>]*(?:>|$)/],[PR.PR_COMMENT,/^<\!--[\s\S]*?(?:-\->|$)/],[PR.PR_PUNCTUATION,/^(?:<[%?]|[%?]>)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-handlebars",/^<script\b[^>]*type\s*=\s*['"]?text\/x-handlebars-template['"]?\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i],[PR.PR_DECLARATION,/^{{[#^>/]?\s*[\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{&?\s*[\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{{>?\s*[\w.][^}]*}}}/],[PR.PR_COMMENT,/^{{![^}]*}}/]]),["handlebars","hbs"]);PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN,/^[ \t\r\n\f]+/,null," \t\r\n\f"]],[[PR.PR_STRING,/^\"(?:[^\n\r\f\\\"]|\\(?:\r\n?|\n|\f)|\\[\s\S])*\"/,null],[PR.PR_STRING,/^\'(?:[^\n\r\f\\\']|\\(?:\r\n?|\n|\f)|\\[\s\S])*\'/,null],["lang-css-str",/^url\(([^\)\"\']*)\)/i],[PR.PR_KEYWORD,/^(?:url|rgb|\!important|@import|@page|@media|@charset|inherit)(?=[^\-\w]|$)/i,null],["lang-css-kw",/^(-?(?:[_a-z]|(?:\\[0-9a-f]+ ?))(?:[_a-z0-9\-]|\\(?:\\[0-9a-f]+ ?))*)\s*:/i],[PR.PR_COMMENT,/^\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\//],[PR.PR_COMMENT,/^(?:<!--|-->)/],[PR.PR_LITERAL,/^(?:\d+|\d*\.\d+)(?:%|[a-z]+)?/i],[PR.PR_LITERAL,/^#(?:[0-9a-f]{3}){1,2}/i],[PR.PR_PLAIN,/^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i],[PR.PR_PUNCTUATION,/^[^\s\w\'\"]+/]]),["css"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_KEYWORD,/^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i]]),["css-kw"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_STRING,/^[^\)\"\']+/]]),["css-str"]);

================
File: frontend/coverage/lcov-report/sorter.js
================
/* eslint-disable */
var addSorting = (function() {
    'use strict';
    var cols,
        currentSort = {
            index: 0,
            desc: false
        };

    // returns the summary table element
    function getTable() {
        return document.querySelector('.coverage-summary');
    }
    // returns the thead element of the summary table
    function getTableHeader() {
        return getTable().querySelector('thead tr');
    }
    // returns the tbody element of the summary table
    function getTableBody() {
        return getTable().querySelector('tbody');
    }
    // returns the th element for nth column
    function getNthColumn(n) {
        return getTableHeader().querySelectorAll('th')[n];
    }

    function onFilterInput() {
        const searchValue = document.getElementById('fileSearch').value;
        const rows = document.getElementsByTagName('tbody')[0].children;
        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            if (
                row.textContent
                    .toLowerCase()
                    .includes(searchValue.toLowerCase())
            ) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        }
    }

    // loads the search box
    function addSearchBox() {
        var template = document.getElementById('filterTemplate');
        var templateClone = template.content.cloneNode(true);
        templateClone.getElementById('fileSearch').oninput = onFilterInput;
        template.parentElement.appendChild(templateClone);
    }

    // loads all columns
    function loadColumns() {
        var colNodes = getTableHeader().querySelectorAll('th'),
            colNode,
            cols = [],
            col,
            i;

        for (i = 0; i < colNodes.length; i += 1) {
            colNode = colNodes[i];
            col = {
                key: colNode.getAttribute('data-col'),
                sortable: !colNode.getAttribute('data-nosort'),
                type: colNode.getAttribute('data-type') || 'string'
            };
            cols.push(col);
            if (col.sortable) {
                col.defaultDescSort = col.type === 'number';
                colNode.innerHTML =
                    colNode.innerHTML + '<span class="sorter"></span>';
            }
        }
        return cols;
    }
    // attaches a data attribute to every tr element with an object
    // of data values keyed by column name
    function loadRowData(tableRow) {
        var tableCols = tableRow.querySelectorAll('td'),
            colNode,
            col,
            data = {},
            i,
            val;
        for (i = 0; i < tableCols.length; i += 1) {
            colNode = tableCols[i];
            col = cols[i];
            val = colNode.getAttribute('data-value');
            if (col.type === 'number') {
                val = Number(val);
            }
            data[col.key] = val;
        }
        return data;
    }
    // loads all row data
    function loadData() {
        var rows = getTableBody().querySelectorAll('tr'),
            i;

        for (i = 0; i < rows.length; i += 1) {
            rows[i].data = loadRowData(rows[i]);
        }
    }
    // sorts the table using the data for the ith column
    function sortByIndex(index, desc) {
        var key = cols[index].key,
            sorter = function(a, b) {
                a = a.data[key];
                b = b.data[key];
                return a < b ? -1 : a > b ? 1 : 0;
            },
            finalSorter = sorter,
            tableBody = document.querySelector('.coverage-summary tbody'),
            rowNodes = tableBody.querySelectorAll('tr'),
            rows = [],
            i;

        if (desc) {
            finalSorter = function(a, b) {
                return -1 * sorter(a, b);
            };
        }

        for (i = 0; i < rowNodes.length; i += 1) {
            rows.push(rowNodes[i]);
            tableBody.removeChild(rowNodes[i]);
        }

        rows.sort(finalSorter);

        for (i = 0; i < rows.length; i += 1) {
            tableBody.appendChild(rows[i]);
        }
    }
    // removes sort indicators for current column being sorted
    function removeSortIndicators() {
        var col = getNthColumn(currentSort.index),
            cls = col.className;

        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');
        col.className = cls;
    }
    // adds sort indicators for current column being sorted
    function addSortIndicators() {
        getNthColumn(currentSort.index).className += currentSort.desc
            ? ' sorted-desc'
            : ' sorted';
    }
    // adds event listeners for all sorter widgets
    function enableUI() {
        var i,
            el,
            ithSorter = function ithSorter(i) {
                var col = cols[i];

                return function() {
                    var desc = col.defaultDescSort;

                    if (currentSort.index === i) {
                        desc = !currentSort.desc;
                    }
                    sortByIndex(i, desc);
                    removeSortIndicators();
                    currentSort.index = i;
                    currentSort.desc = desc;
                    addSortIndicators();
                };
            };
        for (i = 0; i < cols.length; i += 1) {
            if (cols[i].sortable) {
                // add the click event handler on the th so users
                // dont have to click on those tiny arrows
                el = getNthColumn(i).querySelector('.sorter').parentElement;
                if (el.addEventListener) {
                    el.addEventListener('click', ithSorter(i));
                } else {
                    el.attachEvent('onclick', ithSorter(i));
                }
            }
        }
    }
    // adds sorting functionality to the UI
    return function() {
        if (!getTable()) {
            return;
        }
        cols = loadColumns();
        loadData();
        addSearchBox();
        addSortIndicators();
        enableUI();
    };
})();

window.addEventListener('load', addSorting);

================
File: frontend/coverage/lcov-report/TeamPlayerSelector.js.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for TeamPlayerSelector.js</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> TeamPlayerSelector.js</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.65% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>87/104</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">82.35% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>56/68</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">80% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>28/35</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">88.17% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>82/93</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a>
<a name='L269'></a><a href='#L269'>269</a>
<a name='L270'></a><a href='#L270'>270</a>
<a name='L271'></a><a href='#L271'>271</a>
<a name='L272'></a><a href='#L272'>272</a>
<a name='L273'></a><a href='#L273'>273</a>
<a name='L274'></a><a href='#L274'>274</a>
<a name='L275'></a><a href='#L275'>275</a>
<a name='L276'></a><a href='#L276'>276</a>
<a name='L277'></a><a href='#L277'>277</a>
<a name='L278'></a><a href='#L278'>278</a>
<a name='L279'></a><a href='#L279'>279</a>
<a name='L280'></a><a href='#L280'>280</a>
<a name='L281'></a><a href='#L281'>281</a>
<a name='L282'></a><a href='#L282'>282</a>
<a name='L283'></a><a href='#L283'>283</a>
<a name='L284'></a><a href='#L284'>284</a>
<a name='L285'></a><a href='#L285'>285</a>
<a name='L286'></a><a href='#L286'>286</a>
<a name='L287'></a><a href='#L287'>287</a>
<a name='L288'></a><a href='#L288'>288</a>
<a name='L289'></a><a href='#L289'>289</a>
<a name='L290'></a><a href='#L290'>290</a>
<a name='L291'></a><a href='#L291'>291</a>
<a name='L292'></a><a href='#L292'>292</a>
<a name='L293'></a><a href='#L293'>293</a>
<a name='L294'></a><a href='#L294'>294</a>
<a name='L295'></a><a href='#L295'>295</a>
<a name='L296'></a><a href='#L296'>296</a>
<a name='L297'></a><a href='#L297'>297</a>
<a name='L298'></a><a href='#L298'>298</a>
<a name='L299'></a><a href='#L299'>299</a>
<a name='L300'></a><a href='#L300'>300</a>
<a name='L301'></a><a href='#L301'>301</a>
<a name='L302'></a><a href='#L302'>302</a>
<a name='L303'></a><a href='#L303'>303</a>
<a name='L304'></a><a href='#L304'>304</a>
<a name='L305'></a><a href='#L305'>305</a>
<a name='L306'></a><a href='#L306'>306</a>
<a name='L307'></a><a href='#L307'>307</a>
<a name='L308'></a><a href='#L308'>308</a>
<a name='L309'></a><a href='#L309'>309</a>
<a name='L310'></a><a href='#L310'>310</a>
<a name='L311'></a><a href='#L311'>311</a>
<a name='L312'></a><a href='#L312'>312</a>
<a name='L313'></a><a href='#L313'>313</a>
<a name='L314'></a><a href='#L314'>314</a>
<a name='L315'></a><a href='#L315'>315</a>
<a name='L316'></a><a href='#L316'>316</a>
<a name='L317'></a><a href='#L317'>317</a>
<a name='L318'></a><a href='#L318'>318</a>
<a name='L319'></a><a href='#L319'>319</a>
<a name='L320'></a><a href='#L320'>320</a>
<a name='L321'></a><a href='#L321'>321</a>
<a name='L322'></a><a href='#L322'>322</a>
<a name='L323'></a><a href='#L323'>323</a>
<a name='L324'></a><a href='#L324'>324</a>
<a name='L325'></a><a href='#L325'>325</a>
<a name='L326'></a><a href='#L326'>326</a>
<a name='L327'></a><a href='#L327'>327</a>
<a name='L328'></a><a href='#L328'>328</a>
<a name='L329'></a><a href='#L329'>329</a>
<a name='L330'></a><a href='#L330'>330</a>
<a name='L331'></a><a href='#L331'>331</a>
<a name='L332'></a><a href='#L332'>332</a>
<a name='L333'></a><a href='#L333'>333</a>
<a name='L334'></a><a href='#L334'>334</a>
<a name='L335'></a><a href='#L335'>335</a>
<a name='L336'></a><a href='#L336'>336</a>
<a name='L337'></a><a href='#L337'>337</a>
<a name='L338'></a><a href='#L338'>338</a>
<a name='L339'></a><a href='#L339'>339</a>
<a name='L340'></a><a href='#L340'>340</a>
<a name='L341'></a><a href='#L341'>341</a>
<a name='L342'></a><a href='#L342'>342</a>
<a name='L343'></a><a href='#L343'>343</a>
<a name='L344'></a><a href='#L344'>344</a>
<a name='L345'></a><a href='#L345'>345</a>
<a name='L346'></a><a href='#L346'>346</a>
<a name='L347'></a><a href='#L347'>347</a>
<a name='L348'></a><a href='#L348'>348</a>
<a name='L349'></a><a href='#L349'>349</a>
<a name='L350'></a><a href='#L350'>350</a>
<a name='L351'></a><a href='#L351'>351</a>
<a name='L352'></a><a href='#L352'>352</a>
<a name='L353'></a><a href='#L353'>353</a>
<a name='L354'></a><a href='#L354'>354</a>
<a name='L355'></a><a href='#L355'>355</a>
<a name='L356'></a><a href='#L356'>356</a>
<a name='L357'></a><a href='#L357'>357</a>
<a name='L358'></a><a href='#L358'>358</a>
<a name='L359'></a><a href='#L359'>359</a>
<a name='L360'></a><a href='#L360'>360</a>
<a name='L361'></a><a href='#L361'>361</a>
<a name='L362'></a><a href='#L362'>362</a>
<a name='L363'></a><a href='#L363'>363</a>
<a name='L364'></a><a href='#L364'>364</a>
<a name='L365'></a><a href='#L365'>365</a>
<a name='L366'></a><a href='#L366'>366</a>
<a name='L367'></a><a href='#L367'>367</a>
<a name='L368'></a><a href='#L368'>368</a>
<a name='L369'></a><a href='#L369'>369</a>
<a name='L370'></a><a href='#L370'>370</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">27x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">26x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">20x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">32x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import React, { useState, useEffect } from 'react';
import axios from 'axios';
import TranslatedText from './TranslatedText';
&nbsp;
function TeamPlayerSelector({ onSelect, followedTeams = [], followedPlayers = [] }) {
  const [teams, setTeams] = useState([]);
  const [rostersByTeam, setRostersByTeam] = useState({});
  const [selectedTeamFilter, setSelectedTeamFilter] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchType, setSearchType] = useState('teams');
  const [error, setError] = useState(null);
  const [rosterLoading, setRosterLoading] = useState(false);
&nbsp;
  // Fetch teams on mount
  useEffect(() =&gt; {
    const fetchTeams = async () =&gt; {
      try {
        console.log('Fetching teams...');
        setLoading(true);
        setError(null);
        const response = await axios.get('https://statsapi.mlb.com/api/v1/teams?sportId=1');
        console.log('Teams response:', response.data);
        
        if (response.data &amp;&amp; response.data.teams) {
          const sortedTeams = response.data.teams.sort((a, b) =&gt; a.name.localeCompare(b.name));
          setTeams(sortedTeams);
          console.log('Sorted teams:', sortedTeams);
        } else <span class="missing-if-branch" title="else path not taken" >E</span>{
<span class="cstat-no" title="statement not covered" >          throw new Error('Invalid response format');</span>
        }
      } catch (error) {
        console.error('Error fetching teams:', error);
        setError(error.message || <span class="branch-1 cbranch-no" title="branch not covered" >'Failed to fetch teams')</span>;
        setTeams([]);
      } finally {
        setLoading(false);
      }
    };
&nbsp;
    fetchTeams();
  }, []);
&nbsp;
  // Fetch roster for a specific team
  const fetchRoster = async (teamId) =&gt; {
    <span class="missing-if-branch" title="if path not taken" >I</span>if (!teamId || rostersByTeam[teamId]) <span class="cstat-no" title="statement not covered" >return;</span>
    
    setRosterLoading(true);
    try {
      console.log('Fetching roster from:', `${process.env.REACT_APP_BACKEND_URL}/api/mlb/roster/${teamId}`);
      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/mlb/roster/${teamId}`);
      console.log('Roster response:', response.data);
      
      if (response.data &amp;&amp; response.data.roster) {
        setRostersByTeam(prev =&gt; ({
          ...prev,
          [teamId]: response.data.roster
        }));
      } else <span class="missing-if-branch" title="else path not taken" >E</span>{
<span class="cstat-no" title="statement not covered" >        throw new Error('Invalid roster response format');</span>
      }
    } catch (error) {
      console.error('Error fetching roster:', error);
      setRostersByTeam(prev =&gt; ({
        ...prev,
        [teamId]: []
      }));
    } finally {
      setRosterLoading(false);
    }
  };
&nbsp;
  // Fetch roster when team filter changes
  useEffect(() =&gt; {
    if (selectedTeamFilter) {
      fetchRoster(selectedTeamFilter);
    }
  }, [selectedTeamFilter]);
&nbsp;
  // Get current filtered and searched players
  const getCurrentPlayers = () =&gt; {
    <span class="missing-if-branch" title="if path not taken" >I</span>if (!selectedTeamFilter) <span class="cstat-no" title="statement not covered" >return [];</span>
    const roster = rostersByTeam[selectedTeamFilter] || [];
    return roster.filter(player =&gt; 
      player.person.fullName.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };
&nbsp;
  // Get player data for a followed player
  const getPlayerData = <span class="fstat-no" title="function not covered" >(p</span>layerId) =&gt; {
<span class="cstat-no" title="statement not covered" >    for (const teamRoster of Object.values(rostersByTeam)) {</span>
      const player = <span class="cstat-no" title="statement not covered" >teamRoster?.find(<span class="fstat-no" title="function not covered" >p </span>=&gt; <span class="cstat-no" title="statement not covered" >p.person.id === playerId)</span>;</span>
<span class="cstat-no" title="statement not covered" >      if (player) <span class="cstat-no" title="statement not covered" >return player;</span></span>
    }
<span class="cstat-no" title="statement not covered" >    return null;</span>
  };
&nbsp;
  // Pre-fetch rosters for followed players' teams
  useEffect(() =&gt; {
    const fetchFollowedPlayersRosters = async () =&gt; {
      // Get unique team IDs from followed players that we don't have rosters for yet
      const teamIds = new Set(followedTeams.map(team =&gt; team.id));
      const promises = Array.from(teamIds)
        .filter(teamId =&gt; !rostersByTeam[teamId])
        .map(teamId =&gt; fetchRoster(teamId));
      
      await Promise.all(promises);
    };
&nbsp;
    fetchFollowedPlayersRosters();
  }, [followedTeams]);
&nbsp;
  const handleSelection = ({ team, player }) =&gt; {
    console.log('Selected team:', team);  // Debug log
    console.log('Selected player:', player);  // Debug log
    
    if (team) {
      // Check if team is already followed
      const isAlreadyFollowed = followedTeams.some(<span class="fstat-no" title="function not covered" >t </span>=&gt; <span class="cstat-no" title="statement not covered" >t.id === team.id)</span>;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (!isAlreadyFollowed) {
        onSelect({ team });
      }
    } else <span class="missing-if-branch" title="else path not taken" >E</span>if (player) {
      // Check if player is already followed
      const isAlreadyFollowed = followedPlayers.some(<span class="fstat-no" title="function not covered" >p </span>=&gt; <span class="cstat-no" title="statement not covered" >p.id === player.id)</span>;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (!isAlreadyFollowed) {
        onSelect({ player });
      }
    }
  };
&nbsp;
  if (loading &amp;&amp; !teams.length) {
    return (
      &lt;div className="flex justify-center items-center py-20"&gt;
        &lt;div 
          role="status"
          className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"
        &gt;
          &lt;span className="sr-only"&gt;Loading...&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
&nbsp;
  if (error &amp;&amp; !teams.length) {
    return (
      &lt;div className="text-center py-8"&gt;
        &lt;div className="text-red-500 dark:text-red-400 mb-4"&gt;
          &lt;TranslatedText 
            text="Failed to fetch teams" 
            data-testid="translated-failed-to-fetch-teams" 
          /&gt;
        &lt;/div&gt;
        &lt;button
          onClick={<span class="fstat-no" title="function not covered" >()</span> =&gt; {
<span class="cstat-no" title="statement not covered" >            setError(null);</span>
<span class="cstat-no" title="statement not covered" >            fetchTeams();</span>
          }}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        &gt;
          &lt;TranslatedText 
            text="Retry" 
            data-testid="translated-retry" 
          /&gt;
        &lt;/button&gt;
      &lt;/div&gt;
    );
  }
&nbsp;
  return (
    &lt;div className="space-y-6"&gt;
      {/* Search input - Updated styling */}
      &lt;div className="w-full"&gt;
        &lt;label htmlFor="search" className="block text-lg font-medium text-gray-200 mb-2"&gt;
          &lt;TranslatedText text="Search teams or players" /&gt;
        &lt;/label&gt;
        &lt;div className="relative"&gt;
          &lt;input
            type="text"
            name="search"
            id="search"
            className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg
              text-gray-200 placeholder-gray-400
              focus:ring-2 focus:ring-blue-500 focus:border-blue-500
              transition-colors duration-200"
            placeholder={searchType === 'teams' ? 'Search teams...' : 'Search players...'}
            value={searchQuery}
            onChange={(e) =&gt; setSearchQuery(e.target.value)}
          /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
&nbsp;
      {/* Toggle buttons - Updated styling to match */}
      &lt;div className="flex space-x-4 mt-4"&gt;
        &lt;button
          onClick={<span class="fstat-no" title="function not covered" >()</span> =&gt; <span class="cstat-no" title="statement not covered" >setSearchType('teams')}</span>
          className={`px-6 py-3 rounded-lg transition-colors duration-200 ${
            searchType === 'teams'
              ? 'bg-blue-600 text-white'
              : 'bg-gray-700 text-gray-200 hover:bg-gray-600'
          }`}
        &gt;
          &lt;TranslatedText text="Teams" /&gt;
        &lt;/button&gt;
        &lt;button
          onClick={() =&gt; setSearchType('players')}
          className={`px-6 py-3 rounded-lg transition-colors duration-200 ${
            searchType === 'players'
              ? 'bg-blue-600 text-white'
              : 'bg-gray-700 text-gray-200 hover:bg-gray-600'
          }`}
        &gt;
          &lt;TranslatedText text="Players" data-testid="translated-players" /&gt;
        &lt;/button&gt;
      &lt;/div&gt;
&nbsp;
      {/* Results list */}
      &lt;div className="mt-4"&gt;
        {searchType === 'teams' ? (
          &lt;div className="space-y-8"&gt;
            {/* Teams Section */}
            &lt;section&gt;
              &lt;div className="flex justify-between items-center mb-4"&gt;
                &lt;h2 className="text-xl font-semibold text-gray-200"&gt;
                  &lt;TranslatedText text="Teams" /&gt;
                &lt;/h2&gt;
                &lt;span className="text-gray-400"&gt;
                  {followedTeams.length} followed
                &lt;/span&gt;
              &lt;/div&gt;
              
              {teams.length &gt; 0 ? (
                &lt;div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"&gt;
                  {teams
                    .filter(team =&gt; 
                      team.name.toLowerCase().includes(searchQuery.toLowerCase())
                    )
                    .map((team) =&gt; {
                      const isFollowed = followedTeams.some(t =&gt; t.id === team.id);
                      return (
                        &lt;button
                          key={team.id}
                          onClick={() =&gt; handleSelection({ team })}
                          disabled={isFollowed}
                          className={`p-4 rounded-lg border transition-all duration-200 ${
                            isFollowed
                              ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 cursor-not-allowed opacity-70'
                              : 'border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-500 bg-white dark:bg-gray-800'
                          }`}
                        &gt;
                          &lt;div className="flex flex-col items-center"&gt;
                            &lt;img
                              src={`https://www.mlbstatic.com/team-logos/${team.id}.svg`}
                              alt={team.name}
                              className="w-16 h-16 object-contain mb-2"
                              onError={<span class="fstat-no" title="function not covered" >(e</span>) =&gt; {
<span class="cstat-no" title="statement not covered" >                                e.target.onerror = null;</span>
<span class="cstat-no" title="statement not covered" >                                e.target.src = '/images/default-team-logo.png';</span>
                              }}
                            /&gt;
                            &lt;p className="text-sm font-medium text-center text-gray-200"&gt;
                              {team.name}
                            &lt;/p&gt;
                          &lt;/div&gt;
                        &lt;/button&gt;
                      );
                    })}
                &lt;/div&gt;
              ) : (
<span class="branch-1 cbranch-no" title="branch not covered" >                &lt;div className="text-center py-12 bg-gray-800/50 rounded-lg"&gt;</span>
                  &lt;p className="text-gray-400"&gt;
                    &lt;TranslatedText text="No teams found" /&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
              )}
            &lt;/section&gt;
          &lt;/div&gt;
        ) : (
          &lt;div className="space-y-8"&gt;
            {/* Players Section */}
            &lt;section&gt;
              &lt;div className="flex justify-between items-center mb-4"&gt;
                &lt;h2 className="text-xl font-semibold text-gray-900 dark:text-white"&gt;Players&lt;/h2&gt;
                &lt;span className="text-sm text-gray-500 dark:text-gray-400"&gt;
                  {followedPlayers.length} followed
                &lt;/span&gt;
              &lt;/div&gt;
&nbsp;
              {/* Filter Controls */}
              &lt;div className="flex flex-col md:flex-row gap-4 mb-6"&gt;
                {/* Team Filter Dropdown */}
                &lt;div className="flex-1"&gt;
                  &lt;select
                    value={selectedTeamFilter || ''}
                    onChange={(e) =&gt; setSelectedTeamFilter(e.target.value || <span class="branch-1 cbranch-no" title="branch not covered" >null)</span>}
                    className="w-full rounded-lg border border-gray-300 dark:border-gray-600 
                      bg-white dark:bg-gray-700 text-gray-900 dark:text-white 
                      py-2 px-3 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  &gt;
                    &lt;option value=""&gt;Select a team to filter players&lt;/option&gt;
                    {teams.map(team =&gt; (
                      &lt;option key={team.id} value={team.id}&gt;
                        {team.name}
                      &lt;/option&gt;
                    ))}
                  &lt;/select&gt;
                &lt;/div&gt;
              &lt;/div&gt;
&nbsp;
              {/* Players Grid */}
              {rosterLoading ? (
                &lt;div className="flex justify-center items-center py-12"&gt;
                  &lt;div 
                    role="status"
                    className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"
                  &gt;
                    &lt;span className="sr-only"&gt;Loading...&lt;/span&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              ) : selectedTeamFilter &amp;&amp; getCurrentPlayers().length &gt; 0 ? (
                &lt;div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"&gt;
                  {getCurrentPlayers().map((player, index) =&gt; (
                    &lt;button
                      key={player.person.id}
                      onClick={() =&gt; handleSelection({ player: player.person })}
                      disabled={followedPlayers.some(p =&gt; p.id === player.person.id)}
                      className={`p-4 rounded-lg border transition-all duration-200
                        ${followedPlayers.some(p =&gt; p.id === player.person.id)
                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                          : 'border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-500 bg-white dark:bg-gray-800'
                        }`}
                    &gt;
                      &lt;div className="flex flex-col items-center"&gt;
                        &lt;div className="w-16 h-16 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center mb-2"&gt;
                          &lt;span className="text-2xl font-bold text-gray-600 dark:text-gray-300"&gt;
                            {player.person.primaryNumber || '#'}
                          &lt;/span&gt;
                        &lt;/div&gt;
                        &lt;p className="text-sm font-medium text-center text-gray-900 dark:text-white"&gt;
                          {player.person.fullName}
                        &lt;/p&gt;
                        &lt;p className="text-xs text-gray-500 dark:text-gray-400 mt-1"&gt;
                          {player.position.abbreviation}
                        &lt;/p&gt;
                      &lt;/div&gt;
                    &lt;/button&gt;
                  ))}
                &lt;/div&gt;
              ) : selectedTeamFilter ? (
                &lt;div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-lg"&gt;
                  &lt;p className="text-gray-600 dark:text-gray-400"&gt;
                    &lt;TranslatedText text="No players found for the selected team" /&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
              ) : (
                &lt;div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-lg"&gt;
                  &lt;p className="text-gray-600 dark:text-gray-400"&gt;
                    &lt;TranslatedText text="Select a team to view players" /&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
              )}
            &lt;/section&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
}
&nbsp;
export default TeamPlayerSelector; </pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-01-08T19:56:42.920Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>

================
File: frontend/coverage/lcov.info
================
TN:
SF:src\components\TeamPlayerSelector.js
FN:5,TeamPlayerSelector
FN:16,(anonymous_1)
FN:17,(anonymous_2)
FN:26,(anonymous_3)
FN:45,(anonymous_4)
FN:55,(anonymous_5)
FN:64,(anonymous_6)
FN:74,(anonymous_7)
FN:81,(anonymous_8)
FN:84,(anonymous_9)
FN:90,(anonymous_10)
FN:92,(anonymous_11)
FN:99,(anonymous_12)
FN:100,(anonymous_13)
FN:102,(anonymous_14)
FN:104,(anonymous_15)
FN:105,(anonymous_16)
FN:113,(anonymous_17)
FN:119,(anonymous_18)
FN:125,(anonymous_19)
FN:155,(anonymous_20)
FN:188,(anonymous_21)
FN:196,(anonymous_22)
FN:206,(anonymous_23)
FN:235,(anonymous_24)
FN:238,(anonymous_25)
FN:239,(anonymous_26)
FN:243,(anonymous_27)
FN:256,(anonymous_28)
FN:295,(anonymous_29)
FN:301,(anonymous_30)
FN:322,(anonymous_31)
FN:325,(anonymous_32)
FN:326,(anonymous_33)
FN:328,(anonymous_34)
FNF:35
FNH:28
FNDA:39,TeamPlayerSelector
FNDA:11,(anonymous_1)
FNDA:11,(anonymous_2)
FNDA:10,(anonymous_3)
FNDA:6,(anonymous_4)
FNDA:4,(anonymous_5)
FNDA:1,(anonymous_6)
FNDA:16,(anonymous_7)
FNDA:15,(anonymous_8)
FNDA:10,(anonymous_9)
FNDA:0,(anonymous_10)
FNDA:0,(anonymous_11)
FNDA:36,(anonymous_12)
FNDA:36,(anonymous_13)
FNDA:1,(anonymous_14)
FNDA:1,(anonymous_15)
FNDA:1,(anonymous_16)
FNDA:2,(anonymous_17)
FNDA:0,(anonymous_18)
FNDA:0,(anonymous_19)
FNDA:0,(anonymous_20)
FNDA:2,(anonymous_21)
FNDA:0,(anonymous_22)
FNDA:5,(anonymous_23)
FNDA:20,(anonymous_24)
FNDA:19,(anonymous_25)
FNDA:2,(anonymous_26)
FNDA:1,(anonymous_27)
FNDA:0,(anonymous_28)
FNDA:5,(anonymous_29)
FNDA:32,(anonymous_30)
FNDA:5,(anonymous_31)
FNDA:1,(anonymous_32)
FNDA:1,(anonymous_33)
FNDA:1,(anonymous_34)
DA:6,39
DA:7,39
DA:8,39
DA:9,39
DA:10,39
DA:11,39
DA:12,39
DA:13,39
DA:16,39
DA:17,11
DA:18,11
DA:19,11
DA:20,11
DA:21,11
DA:22,11
DA:23,10
DA:25,10
DA:26,10
DA:27,10
DA:28,10
DA:30,0
DA:33,1
DA:34,1
DA:35,1
DA:37,11
DA:41,11
DA:45,39
DA:46,6
DA:48,6
DA:49,6
DA:50,6
DA:51,6
DA:52,5
DA:54,4
DA:55,4
DA:60,0
DA:63,1
DA:64,1
DA:69,5
DA:74,39
DA:75,16
DA:76,5
DA:81,39
DA:82,15
DA:83,15
DA:84,15
DA:85,10
DA:90,39
DA:91,0
DA:92,0
DA:93,0
DA:95,0
DA:99,39
DA:100,36
DA:102,36
DA:103,36
DA:104,1
DA:105,1
DA:107,36
DA:110,36
DA:113,39
DA:114,2
DA:115,2
DA:117,2
DA:119,1
DA:120,1
DA:121,1
DA:123,1
DA:125,1
DA:126,1
DA:127,1
DA:132,39
DA:133,12
DA:145,27
DA:146,1
DA:156,0
DA:157,0
DA:170,26
DA:188,2
DA:196,0
DA:206,5
DA:236,20
DA:239,19
DA:240,19
DA:243,1
DA:257,0
DA:258,0
DA:295,5
DA:302,32
DA:323,5
DA:325,1
DA:326,1
DA:328,1
LF:93
LH:82
BRDA:5,0,0,34
BRDA:5,1,0,29
BRDA:25,2,0,10
BRDA:25,2,1,0
BRDA:25,3,0,10
BRDA:25,3,1,10
BRDA:34,4,0,1
BRDA:34,4,1,0
BRDA:46,5,0,0
BRDA:46,5,1,6
BRDA:46,6,0,6
BRDA:46,6,1,6
BRDA:54,7,0,4
BRDA:54,7,1,0
BRDA:54,8,0,4
BRDA:54,8,1,4
BRDA:75,9,0,5
BRDA:75,9,1,11
BRDA:82,10,0,0
BRDA:82,10,1,15
BRDA:83,11,0,15
BRDA:83,11,1,5
BRDA:93,12,0,0
BRDA:93,12,1,0
BRDA:117,13,0,1
BRDA:117,13,1,1
BRDA:120,14,0,1
BRDA:120,14,1,0
BRDA:123,15,0,1
BRDA:123,15,1,0
BRDA:126,16,0,1
BRDA:126,16,1,0
BRDA:132,17,0,12
BRDA:132,17,1,27
BRDA:132,18,0,39
BRDA:132,18,1,12
BRDA:145,19,0,1
BRDA:145,19,1,26
BRDA:145,20,0,27
BRDA:145,20,1,1
BRDA:186,21,0,10
BRDA:186,21,1,16
BRDA:198,22,0,10
BRDA:198,22,1,16
BRDA:208,23,0,16
BRDA:208,23,1,10
BRDA:219,24,0,10
BRDA:219,24,1,16
BRDA:232,25,0,10
BRDA:232,25,1,0
BRDA:246,26,0,1
BRDA:246,26,1,18
BRDA:294,27,0,16
BRDA:294,27,1,5
BRDA:295,28,0,5
BRDA:295,28,1,0
BRDA:311,29,0,1
BRDA:311,29,1,15
BRDA:320,30,0,5
BRDA:320,30,1,10
BRDA:320,31,0,15
BRDA:320,31,1,10
BRDA:328,32,0,1
BRDA:328,32,1,4
BRDA:336,33,0,5
BRDA:336,33,1,5
BRDA:349,34,0,5
BRDA:349,34,1,5
BRF:68
BRH:56
end_of_record

================
File: frontend/Dockerfile
================
# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Set environment variables during build
ARG REACT_APP_BACKEND_URL
ENV REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}

# Build the app
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built assets from build stage
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

================
File: frontend/jest.config.js
================
module.exports = {
  collectCoverageFrom: [
    'src/**/*.{js,jsx}',
    '!src/index.js',
    '!src/reportWebVitals.js',
    '!src/setupTests.js'
  ],
  coverageReporters: ['lcov', 'text', 'text-summary'],
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],
  moduleNameMapper: {
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '\\.(gif|ttf|eot|svg|png)$': '<rootDir>/__mocks__/fileMock.js'
  }
};

================
File: frontend/nginx.conf
================
server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    # Root directory for static files
    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";

    # Handle React Router
    location / {
        try_files $uri $uri/ /index.html;
        expires -1;
    }

    # Static files caching
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, no-transform";
    }

    # Proxy all /api and /news requests to backend
    location ~ ^/(api|news)/ {
        proxy_pass http://backend:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    }
}

================
File: frontend/postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: frontend/public/images/logo.svg
================
<?xml version="1.0" encoding="utf-8"?>
<svg id="logo-53" width="169" height="42" viewBox="0 0 169 42" fill="none" xmlns="http://www.w3.org/2000/svg" xmlns:bx="https://boxy-svg.com"><path fill-rule="evenodd" clip-rule="evenodd" d="M20.6842 0.961929C31.946 0.961929 41.0755 10.0914 41.0755 21.3532C41.0755 32.6151 31.946 41.7446 20.6842 41.7446C9.42234 41.7446 0.292847 32.6151 0.292847 21.3532C0.292847 10.0914 9.42234 0.961929 20.6842 0.961929ZM40.2928 21.3532C40.2928 10.5237 31.5137 1.74455 20.6842 1.74455C19.8106 1.74455 18.9505 1.80167 18.1071 1.91238C18.652 1.86474 19.2034 1.84042 19.7606 1.84042C30.1088 1.84042 38.4977 10.2293 38.4977 20.5775C38.4977 30.9256 30.1088 39.3145 19.7606 39.3145C9.96366 39.3145 1.92284 31.7956 1.09401 22.2135C1.54426 32.6439 10.1428 40.9619 20.6842 40.9619C31.5137 40.9619 40.2928 32.1828 40.2928 21.3532ZM37.715 20.5775C37.715 10.6615 29.6766 2.62305 19.7606 2.62305C18.9555 2.62305 18.1627 2.67605 17.3856 2.77874C17.8641 2.73848 18.3482 2.71794 18.8371 2.71794C28.2717 2.71794 35.9199 10.3662 35.9199 19.8007C35.9199 29.2353 28.2717 36.8835 18.8371 36.8835C9.91648 36.8835 2.59287 30.0458 1.8215 21.3256C2.21369 30.8946 10.0953 38.5319 19.7606 38.5319C29.6766 38.5319 37.715 30.4934 37.715 20.5775ZM18.8371 3.50057C27.8394 3.50057 35.1373 10.7984 35.1373 19.8007C35.1373 28.803 27.8394 36.1008 18.8371 36.1008C10.0434 36.1008 2.87602 29.1372 2.54867 20.4235C3.25542 28.2885 9.86471 34.4524 17.9137 34.4524C26.434 34.4524 33.3412 27.5453 33.3412 19.0249C33.3412 10.5045 26.434 3.59741 17.9137 3.59741C17.4729 3.59741 17.0364 3.6159 16.605 3.65213C17.3348 3.5522 18.0799 3.50057 18.8371 3.50057ZM32.5585 19.0249C32.5585 10.9368 26.0018 4.38004 17.9137 4.38004C17.2303 4.38004 16.5578 4.42684 15.8994 4.51742C16.2589 4.48928 16.6223 4.47495 16.9891 4.47495C24.5959 4.47495 30.7624 10.6414 30.7624 18.2482C30.7624 25.8549 24.5959 32.0214 16.9891 32.0214C9.82947 32.0214 3.94576 26.5585 3.27885 19.5736C3.56738 27.4075 10.0092 33.6698 17.9137 33.6698C26.0018 33.6698 32.5585 27.1131 32.5585 19.0249ZM16.9891 5.25757C24.1636 5.25757 29.9797 11.0737 29.9797 18.2482C29.9797 25.4227 24.1636 31.2388 16.9891 31.2388C9.95594 31.2388 4.2282 25.6496 4.00526 18.6706C4.60739 24.8008 9.77718 29.5904 16.0656 29.5904C22.7588 29.5904 28.1846 24.1645 28.1846 17.4714C28.1846 10.7783 22.7588 5.35246 16.0656 5.35246C15.7587 5.35246 15.4544 5.36387 15.1532 5.38629C15.753 5.30145 16.3659 5.25757 16.9891 5.25757ZM27.402 17.4714C27.402 11.2105 22.3265 6.13509 16.0656 6.13509C15.4941 6.13509 14.9325 6.17738 14.3837 6.259C14.6342 6.24106 14.8871 6.23193 15.1422 6.23193C20.9211 6.23193 25.6059 10.9167 25.6059 16.6956C25.6059 22.4746 20.9211 27.1593 15.1422 27.1593C9.72697 27.1593 5.27257 23.0458 4.73324 17.773C4.89313 23.8945 9.90561 28.8078 16.0656 28.8078C22.3265 28.8078 27.402 23.7323 27.402 17.4714ZM15.1422 7.01456C20.4889 7.01456 24.8232 11.3489 24.8232 16.6956C24.8232 22.0424 20.4889 26.3767 15.1422 26.3767C9.86348 26.3767 5.57156 22.152 5.46317 16.8993C5.9508 21.3032 9.68475 24.7283 14.2187 24.7283C19.084 24.7283 23.0281 20.7842 23.0281 15.9189C23.0281 11.0536 19.084 7.10945 14.2187 7.10945C14.0326 7.10945 13.8479 7.11522 13.6647 7.12659C14.1464 7.05282 14.6398 7.01456 15.1422 7.01456ZM22.2455 15.9189C22.2455 11.4858 18.6518 7.89208 14.2187 7.89208C13.7735 7.89208 13.3368 7.92832 12.9113 7.99801C13.0381 7.99133 13.1657 7.98795 13.2942 7.98795C17.2458 7.98795 20.4493 11.1914 20.4493 15.1431C20.4493 19.0948 17.2458 22.2983 13.2942 22.2983C9.64023 22.2983 6.626 19.5593 6.19252 16.0225C6.24802 20.4079 9.8202 23.9457 14.2187 23.9457C18.6518 23.9457 22.2455 20.352 22.2455 15.9189ZM13.2942 8.77057C16.8136 8.77057 19.6667 11.6236 19.6667 15.1431C19.6667 18.6626 16.8136 21.5156 13.2942 21.5156C9.77471 21.5156 6.92163 18.6626 6.92163 15.1431C6.92163 15.1347 6.92165 15.1262 6.92168 15.1178C7.2881 17.7998 9.58806 19.8663 12.3707 19.8663C15.4082 19.8663 17.8706 17.4039 17.8706 14.3664C17.8706 11.3288 15.4082 8.86646 12.3707 8.86646C12.302 8.86646 12.2336 8.86771 12.1655 8.87021C12.5318 8.80474 12.909 8.77057 13.2942 8.77057ZM17.0879 14.3664C17.0879 11.7611 14.976 9.64908 12.3707 9.64908C9.7654 9.64908 7.6534 11.7611 7.6534 14.3664C7.6534 16.9716 9.7654 19.0836 12.3707 19.0836C14.976 19.0836 17.0879 16.9716 17.0879 14.3664Z" class="cneutral" fill="#1A1414"/><text style="fill: rgb(51, 51, 51); font-family: Esteban; font-size: 28px; white-space: pre;" transform="matrix(0.878715, 0, 0, 0.812183, 8.137292, 4.450333)" x="42.357" y="30.435">GoatSquad</text><defs><style bx:fonts="Esteban">@import url(https://fonts.googleapis.com/css2?family=Esteban%3Aital%2Cwght%400%2C400&amp;display=swap);</style><bx:export><bx:file format="svg"/></bx:export></defs></svg>

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en" class="h-full bg-gray-50">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MLB Fan Feed</title>
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
</head>
<body class="h-full">
    <div id="root"></div>
</body>
</html>

================
File: frontend/src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route, useLocation } from 'react-router-dom';
import MainLayout from './layouts/MainLayout';
import Home from './pages/Home';
import News from './pages/News';
import Calendar from './components/Calendar';
import Preferences from './pages/Preferences';
import Login from './pages/Login';
import ProtectedRoute from './components/ProtectedRoute';
import { AuthProvider } from './contexts/AuthContext';
import { LanguageProvider } from './contexts/LanguageContext';
import Profile from './pages/Profile';
import Register from './pages/Register';
import { AnimatePresence } from 'framer-motion';
import RecommendationsPage from './pages/RecommendationsPage';

// Create a wrapper component that uses useLocation
function AnimatedRoutes() {
  const location = useLocation();

  return (
    <AnimatePresence mode="wait">
      <Routes location={location} key={location.pathname}>
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route path="/" element={
          <ProtectedRoute>
            <MainLayout>
              <Home />
            </MainLayout>
          </ProtectedRoute>
        } />
        <Route path="/news" element={
          <ProtectedRoute>
            <MainLayout>
              <News />
            </MainLayout>
          </ProtectedRoute>
        } />
        <Route path="/calendar" element={
          <ProtectedRoute>
            <MainLayout>
              <Calendar />
            </MainLayout>
          </ProtectedRoute>
        } />
        <Route path="/preferences" element={
          <ProtectedRoute>
            <MainLayout>
              <Preferences />
            </MainLayout>
          </ProtectedRoute>
        } />
        <Route path="/profile" element={
          <ProtectedRoute>
            <MainLayout>
              <Profile />
            </MainLayout>
          </ProtectedRoute>
        } />
        <Route path="/recommendations" element={
          <ProtectedRoute>
            <MainLayout>
              <RecommendationsPage />
            </MainLayout>
          </ProtectedRoute>
        } />
      </Routes>
    </AnimatePresence>
  );
}

function App() {
  return (
    <LanguageProvider>
      <AuthProvider>
        <Router>
          <AnimatedRoutes />
        </Router>
      </AuthProvider>
    </LanguageProvider>
  );
}

export default App;

================
File: frontend/src/components/__tests__/TeamPlayerSelector.test.js
================
import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import axios from 'axios';
import TeamPlayerSelector from '../TeamPlayerSelector';

// Mock axios
jest.mock('axios');

// Mock TranslatedText component
jest.mock('../TranslatedText', () => {
  return function MockTranslatedText({ text }) {
    return <span data-testid={`translated-${text.toLowerCase().replace(/\s+/g, '-')}`}>{text}</span>;
  };
});

describe('TeamPlayerSelector', () => {
  const mockTeams = {
    teams: [
      { id: 1, name: 'New York Yankees' },
      { id: 2, name: 'Boston Red Sox' }
    ]
  };

  const mockRoster = {
    roster: [
      { 
        person: { id: 1, fullName: 'John Doe' },
        position: { abbreviation: 'P' }
      }
    ]
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders loading state initially', () => {
    axios.get.mockResolvedValueOnce({ data: mockTeams });
    render(<TeamPlayerSelector onSelect={() => {}} />);
    
    expect(screen.getByRole('status')).toBeInTheDocument();
  });

  it('renders teams after loading', async () => {
    axios.get.mockResolvedValueOnce({ data: mockTeams });
    
    await act(async () => {
      render(<TeamPlayerSelector onSelect={() => {}} />);
    });
    
    await waitFor(() => {
      expect(screen.getByText('New York Yankees')).toBeInTheDocument();
      expect(screen.getByText('Boston Red Sox')).toBeInTheDocument();
    });
  });

  it('filters teams based on search query', async () => {
    axios.get.mockResolvedValueOnce({ data: mockTeams });
    
    await act(async () => {
      render(<TeamPlayerSelector onSelect={() => {}} />);
    });
    
    await waitFor(() => {
      expect(screen.getByText('New York Yankees')).toBeInTheDocument();
    });

    const searchInput = screen.getByRole('textbox');
    fireEvent.change(searchInput, { target: { value: 'Yankees' } });

    expect(screen.getByText('New York Yankees')).toBeInTheDocument();
    expect(screen.queryByText('Boston Red Sox')).not.toBeInTheDocument();
  });

  it('calls onSelect when a team is clicked', async () => {
    axios.get.mockResolvedValueOnce({ data: mockTeams });
    const mockOnSelect = jest.fn();
    
    await act(async () => {
      render(<TeamPlayerSelector onSelect={mockOnSelect} followedTeams={[]} />);
    });
    
    await waitFor(() => {
      expect(screen.getByText('New York Yankees')).toBeInTheDocument();
    });

    fireEvent.click(screen.getByText('New York Yankees'));
    
    expect(mockOnSelect).toHaveBeenCalledWith({
      team: expect.objectContaining({ id: 1, name: 'New York Yankees' })
    });
  });

  it('prevents selecting already followed teams', async () => {
    axios.get.mockResolvedValueOnce({ data: mockTeams });
    const mockOnSelect = jest.fn();
    const followedTeams = [{ id: 1, name: 'New York Yankees' }];
    
    await act(async () => {
      render(
        <TeamPlayerSelector 
          onSelect={mockOnSelect} 
          followedTeams={followedTeams}
        />
      );
    });
    
    await waitFor(() => {
      const yankeeButton = screen.getByText('New York Yankees').closest('button');
      expect(yankeeButton).toBeDisabled();
    });
  });

  it('handles error state when fetching teams fails', async () => {
    axios.get.mockRejectedValueOnce(new Error('Failed to fetch teams'));
    
    await act(async () => {
      render(<TeamPlayerSelector onSelect={() => {}} />);
    });
    
    await waitFor(() => {
      expect(screen.getByTestId('translated-failed-to-fetch-teams')).toBeInTheDocument();
      expect(screen.getByTestId('translated-retry')).toBeInTheDocument();
    });
  });

  it('fetches roster when team is selected', async () => {
    axios.get
      .mockResolvedValueOnce({ data: mockTeams })
      .mockResolvedValueOnce({ data: mockRoster });

    await act(async () => {
      render(<TeamPlayerSelector onSelect={() => {}} />);
    });

    // Wait for initial load
    await waitFor(() => {
      expect(screen.getByTestId('translated-players')).toBeInTheDocument();
    });

    // Switch to players view
    await act(async () => {
      fireEvent.click(screen.getByTestId('translated-players'));
    });

    // Select a team from dropdown
    const teamSelect = await screen.findByRole('combobox');
    await act(async () => {
      fireEvent.change(teamSelect, { target: { value: '1' } });
    });

    await waitFor(() => {
      expect(axios.get).toHaveBeenCalledWith(expect.stringContaining('/roster/1'));
    });
  });

  it('filters players based on search query', async () => {
    axios.get
      .mockResolvedValueOnce({ data: mockTeams })
      .mockResolvedValueOnce({ data: mockRoster });

    await act(async () => {
      render(<TeamPlayerSelector onSelect={() => {}} />);
    });

    // Wait for initial load and switch to players view
    await waitFor(() => {
      expect(screen.getByTestId('translated-players')).toBeInTheDocument();
    });

    await act(async () => {
      fireEvent.click(screen.getByTestId('translated-players'));
    });

    // Select a team
    const teamSelect = await screen.findByRole('combobox');
    await act(async () => {
      fireEvent.change(teamSelect, { target: { value: '1' } });
    });

    // Search for player
    const searchInput = screen.getByRole('textbox');
    await act(async () => {
      fireEvent.change(searchInput, { target: { value: 'John' } });
    });

    await waitFor(() => {
      expect(screen.getByText('John Doe')).toBeInTheDocument();
    });
  });

  it('handles player selection', async () => {
    const mockOnSelect = jest.fn();
    axios.get
      .mockResolvedValueOnce({ data: mockTeams })
      .mockResolvedValueOnce({ data: mockRoster });

    await act(async () => {
      render(<TeamPlayerSelector onSelect={mockOnSelect} followedPlayers={[]} />);
    });

    // Switch to players view
    await act(async () => {
      fireEvent.click(screen.getByTestId('translated-players'));
    });

    // Select a team
    const teamSelect = await screen.findByRole('combobox');
    await act(async () => {
      fireEvent.change(teamSelect, { target: { value: '1' } });
    });

    // Wait for player to appear and click it
    await waitFor(() => {
      fireEvent.click(screen.getByText('John Doe'));
    });

    expect(mockOnSelect).toHaveBeenCalledWith({
      player: expect.objectContaining({ id: 1, fullName: 'John Doe' })
    });
  });

  it('prevents selecting already followed players', async () => {
    axios.get
      .mockResolvedValueOnce({ data: mockTeams })
      .mockResolvedValueOnce({ data: mockRoster });

    const followedPlayers = [{ id: 1, fullName: 'John Doe' }];
    
    await act(async () => {
      render(
        <TeamPlayerSelector 
          onSelect={() => {}} 
          followedPlayers={followedPlayers}
        />
      );
    });

    // Wait for initial load
    await waitFor(() => {
      expect(screen.getByTestId('translated-players')).toBeInTheDocument();
    });

    // Switch to players view
    await act(async () => {
      fireEvent.click(screen.getByTestId('translated-players'));
    });

    // Select a team and wait for roster to load
    const teamSelect = await screen.findByRole('combobox');
    await act(async () => {
      fireEvent.change(teamSelect, { target: { value: '1' } });
    });

    // Wait for roster to load and verify button is disabled
    await waitFor(() => {
      const playerButton = screen.getByText('John Doe').closest('button');
      expect(playerButton).toHaveAttribute('disabled');
    });
  });

  it('handles roster loading state', async () => {
    axios.get
      .mockResolvedValueOnce({ data: mockTeams })
      .mockImplementationOnce(() => new Promise(resolve => setTimeout(resolve, 100)));

    await act(async () => {
      render(<TeamPlayerSelector onSelect={() => {}} />);
    });

    // Switch to players view
    await act(async () => {
      fireEvent.click(screen.getByTestId('translated-players'));
    });

    // Select a team
    const teamSelect = await screen.findByRole('combobox');
    await act(async () => {
      fireEvent.change(teamSelect, { target: { value: '1' } });
    });

    // Check for loading spinner
    expect(screen.getByRole('status')).toBeInTheDocument();
  });
});

================
File: frontend/src/components/Calendar.js
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isToday } from 'date-fns';
import { usePreferences } from '../hooks/usePreferences';
import TranslatedText from './TranslatedText';
import PageTransition from './PageTransition';

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [initialLoading, setInitialLoading] = useState(true);
  const { preferences } = usePreferences();

  useEffect(() => {
    const fetchGames = async () => {
      if (!preferences?.teams?.length) {
        setInitialLoading(false);
        return;
      }
      
      setLoading(true);
      try {
        const startDate = format(startOfMonth(currentDate), 'yyyy-MM-dd');
        const endDate = format(endOfMonth(currentDate), 'yyyy-MM-dd');
        
        // Fetch games for all followed teams through our backend proxy
        const gamePromises = preferences.teams.map(team => 
          axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/mlb/schedule`, {
            params: {
              teamId: team.id,
              startDate,
              endDate
            }
          })
        );

        console.log('Fetching games for teams:', preferences.teams);
        
        const responses = await Promise.all(gamePromises);
        console.log('API responses:', responses);

        // Combine and transform all games
        const allEvents = responses.flatMap(response => {
          if (!response.data || !response.data.dates) {
            console.warn('Invalid response format:', response);
            return [];
          }

          const teamId = parseInt(response.config.params.teamId);
          const team = preferences.teams.find(t => t.id === teamId);
          
          return response.data.dates.flatMap(date => {
            if (!date.games) return [];
            
            return date.games.map(game => {
              console.log('Processing game:', game);
              return {
                id: game.gamePk,
                title: `${game.teams.away.team.name} @ ${game.teams.home.team.name}`,
                date: new Date(game.gameDate),
                venue: game.venue?.name || 'TBD',
                time: format(new Date(game.gameDate), 'h:mm a'),
                isHome: game.teams.home.team.id === team.id,
                opponent: game.teams.home.team.id === team.id 
                  ? game.teams.away.team.name 
                  : game.teams.home.team.name,
                teamName: team.name,
                teamColor: getTeamColor(team.name)
              };
            });
          });
        });

        console.log('Processed events:', allEvents);

        // Sort events by date and time
        const sortedEvents = allEvents.sort((a, b) => a.date - b.date);
        setEvents(sortedEvents);
      } catch (error) {
        console.error('Error fetching MLB games:', error);
        console.error('Error details:', {
          message: error.message,
          response: error.response?.data,
          status: error.response?.status
        });
      } finally {
        setLoading(false);
        setInitialLoading(false);
      }
    };

    fetchGames();
  }, [currentDate, preferences?.teams]);

  const daysInMonth = eachDayOfInterval({
    start: startOfMonth(currentDate),
    end: endOfMonth(currentDate)
  });

  const previousMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));
  };

  const nextMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));
  };

  // Helper function to get team color (you can expand this with actual team colors)
  const getTeamColor = (teamName) => {
    const colors = {
      'New York Yankees': '#003087',
      'Boston Red Sox': '#BD3039',
      'Los Angeles Dodgers': '#005A9C',
      'Chicago Cubs': '#0E3386',
      'St. Louis Cardinals': '#C41E3A',
      'San Francisco Giants': '#FD5A1E',
      'Houston Astros': '#002D62',
      'Atlanta Braves': '#CE1141',
      'New York Mets': '#FF5910',
      'Philadelphia Phillies': '#E81828',
      'default': '#666666'
    };
    return colors[teamName] || colors.default;
  };

  // Show loading spinner only on initial load
  if (initialLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!preferences?.teams?.length) {
    return (
      <PageTransition>
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
              <TranslatedText text="No teams selected" />
            </h3>
            <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
              <TranslatedText text="Please select teams in your profile preferences to view their schedules." />
            </p>
          </div>
        </div>
      </PageTransition>
    );
  }

  return (
    <PageTransition>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-16">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white">
            <TranslatedText text="Team Schedules" />
          </h2>
          
          <div className="flex items-center space-x-4">
            <button 
              onClick={previousMonth} 
              className="p-2 text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            
            <h3 className="text-xl font-medium text-gray-900 dark:text-white">
              {format(currentDate, 'MMMM yyyy')}
            </h3>
            
            <button 
              onClick={nextMonth} 
              className="p-2 text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-6 lg:grid-cols-3">
          {/* Events List */}
          <div className="col-span-1 space-y-4">
            {loading ? (
              <div className="animate-pulse space-y-4 opacity-70">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg">
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                  </div>
                ))}
              </div>
            ) : events.length === 0 ? (
              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                <p className="text-gray-500 dark:text-gray-400 text-sm">
                  <TranslatedText text={`No games scheduled for ${format(currentDate, 'MMMM yyyy')}.`} />
                </p>
              </div>
            ) : (
              events.map(event => (
                <div 
                  key={event.id} 
                  className={`bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border ${
                    event.isHome 
                      ? 'border-green-200 dark:border-green-900 bg-green-50 dark:bg-green-900/20' 
                      : 'border-gray-200 dark:border-gray-700'
                  }`}
                >
                  <div className="flex items-start">
                    <div className="flex-shrink-0">
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                        event.isHome 
                          ? 'bg-green-100 dark:bg-green-900/40' 
                          : 'bg-gray-100 dark:bg-gray-700'
                      }`}>
                        <span className="text-xs font-medium" style={{ color: event.teamColor }}>
                          {event.teamName.substring(0, 3).toUpperCase()}
                        </span>
                      </div>
                    </div>
                    <div className="ml-4">
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white">
                        {event.teamName} {event.isHome ? 'vs' : '@'} {event.opponent}
                      </h4>
                      <div className="mt-1 flex items-center text-sm text-gray-500 dark:text-gray-400">
                        <svg className="flex-shrink-0 mr-1.5 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        {format(event.date, 'MMM d, yyyy')} at {event.time}
                      </div>
                      <div className="mt-1 flex items-center text-sm text-gray-500 dark:text-gray-400">
                        <svg className="flex-shrink-0 mr-1.5 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        {event.venue}
                      </div>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>

          {/* Calendar Grid */}
          <div className="col-span-1 lg:col-span-2">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow">
              <div className="grid grid-cols-7 gap-px border-b border-gray-200 dark:border-gray-700">
                {['M', 'T', 'W', 'T', 'F', 'S', 'S'].map((day, i) => (
                  <div key={i} className="px-2 py-3">
                    <div className="text-xs font-medium text-gray-500 dark:text-gray-400 text-center">{day}</div>
                  </div>
                ))}
              </div>
              <div className="grid grid-cols-7 gap-px bg-gray-200 dark:bg-gray-700">
                {daysInMonth.map(day => {
                  const dayEvents = events.filter(event => 
                    format(event.date, 'yyyy-MM-dd') === format(day, 'yyyy-MM-dd')
                  );
                  
                  return (
                    <div
                      key={day.toString()}
                      className={`
                        min-h-[100px] bg-white dark:bg-gray-800 p-2
                        ${!isSameMonth(day, currentDate) ? 'text-gray-400 dark:text-gray-500' : 'dark:text-gray-100'}
                        ${isToday(day) ? 'bg-blue-50 dark:bg-blue-900/20' : ''}
                      `}
                    >
                      <div className="text-right text-sm">{format(day, 'd')}</div>
                      <div className="space-y-1">
                        {dayEvents.map(event => (
                          <div
                            key={event.id}
                            className="mt-1 text-xs truncate rounded p-1 flex items-center space-x-1"
                            style={{
                              backgroundColor: `${event.teamColor}20`,
                              borderLeft: `3px solid ${event.teamColor}`
                            }}
                          >
                            <span className="font-medium" style={{ color: event.teamColor }}>
                              {event.teamName.substring(0, 3).toUpperCase()}
                            </span>
                            <span className="text-gray-700 dark:text-gray-300">
                              {event.time} {event.isHome ? 'vs' : '@'} {event.opponent}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </PageTransition>
  );
}

export default Calendar;

================
File: frontend/src/components/LanguageSelector.js
================
import React, { useState, useRef, useEffect } from 'react';
import { useLanguage } from '../contexts/LanguageContext';

const LanguageSelector = () => {
  const { language, setLanguage } = useLanguage();
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);

  const languages = [
    { code: 'en', name: 'English' },
    { code: 'es', name: 'Español' },
    { code: 'fr', name: 'Français' },
    { code: 'zh', name: '中文' },
    { code: 'ja', name: '日本語' }
  ];

  const currentLanguage = languages.find(lang => lang.code === language)?.name || 'English';

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 
          dark:text-gray-400 dark:hover:text-gray-200 bg-white dark:bg-gray-800 rounded-md border 
          border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 
          focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 
          transition-colors duration-200"
      >
        <span className="flex items-center">
          <span className="mr-2">{currentLanguage}</span>
          <svg 
            className={`h-4 w-4 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`} 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </span>
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-700 
          ring-1 ring-black ring-opacity-5 focus:outline-none z-50 transform opacity-100 scale-100
          transition ease-out duration-200">
          <div className="py-1" role="menu" aria-orientation="vertical">
            {languages.map(lang => (
              <button
                key={lang.code}
                onClick={() => {
                  setLanguage(lang.code);
                  setIsOpen(false);
                }}
                className={`w-full text-left block px-4 py-2 text-sm 
                  ${language === lang.code 
                    ? 'text-indigo-600 dark:text-indigo-400 bg-indigo-50 dark:bg-indigo-900/30' 
                    : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600'
                  } transition-colors duration-150`}
                role="menuitem"
              >
                <span className="flex items-center">
                  {lang.name}
                  {language === lang.code && (
                    <svg className="ml-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  )}
                </span>
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default LanguageSelector;

================
File: frontend/src/components/Navbar.js
================
import React, { useState, useRef, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import TranslatedText from './TranslatedText';
import LanguageSelector from './LanguageSelector';
import { useDarkMode } from '../hooks/useDarkMode';
import { useAuth } from '../contexts/AuthContext';
import axios from 'axios';

function Navbar() {
  const { isDarkMode, toggleDarkMode } = useDarkMode();
  const { logout } = useAuth();
  const navigate = useNavigate();
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);
  const menuRef = useRef(null);
  const buttonRef = useRef(null);
  
  // Add click outside handler
  useEffect(() => {
    function handleClickOutside(event) {
      if (
        menuRef.current && 
        !menuRef.current.contains(event.target) &&
        !buttonRef.current.contains(event.target)
      ) {
        setIsProfileMenuOpen(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const navItems = [
    { path: '/', label: 'Home' },
    { path: '/news', label: 'News' },
    { path: '/calendar', label: 'Calendar' },
    { path: '/preferences', label: 'Preferences' },
    { path: '/recommendations', label: 'Recommendations' }
  ];

  const handleLogout = () => {
    logout();
    navigate('/login');
    setIsProfileMenuOpen(false);
  };

  return (
    <nav className="bg-white dark:bg-gray-800 shadow fixed w-full top-0 z-50 border-b border-gray-200 dark:border-gray-700">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <Link to="/" className="flex-shrink-0 flex items-center">
                <img 
                  src="/images/logo.svg" 
                  alt="Logo" 
                  className="h-8 w-auto filter dark:invert cursor-pointer"
                />
              </Link>
            </div>
            <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
              {navItems.map(item => (
                <Link
                  key={item.path}
                  to={item.path}
                  className="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-900 dark:text-gray-100"
                >
                  <TranslatedText text={item.label} />
                </Link>
              ))}
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <button
              onClick={toggleDarkMode}
              className="p-2 rounded-lg text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
              aria-label="Toggle dark mode"
            >
              {isDarkMode ? (
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
                  />
                </svg>
              ) : (
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
                  />
                </svg>
              )}
            </button>
            <LanguageSelector />
            
            {/* Profile Dropdown */}
            <div className="relative ml-3">
              <button
                ref={buttonRef}
                onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
                className="flex items-center"
                aria-label="User menu"
                aria-haspopup="true"
              >
                <img
                  className="h-8 w-8 rounded-full"
                  src="/images/default-avatar.jpg"
                  alt="Profile"
                />
              </button>

              {/* Dropdown Menu */}
              {isProfileMenuOpen && (
                <div 
                  ref={menuRef}
                  className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
                  role="menu"
                  aria-orientation="vertical"
                  aria-labelledby="user-menu"
                >
                  <Link
                    to="/profile"
                    className="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600"
                    role="menuitem"
                    onClick={() => setIsProfileMenuOpen(false)}
                  >
                    <TranslatedText text="Your Profile" />
                  </Link>
                  <Link
                    to="/settings"
                    className="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600"
                    role="menuitem"
                    onClick={() => setIsProfileMenuOpen(false)}
                  >
                    <TranslatedText text="Settings" />
                  </Link>
                  <button
                    onClick={handleLogout}
                    className="w-full text-left block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600"
                    role="menuitem"
                  >
                    <TranslatedText text="Sign out" />
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      <div className="sm:hidden">
        <div className="pt-2 pb-3 space-y-1">
          {navItems.map(item => (
            <Link
              key={item.path}
              to={item.path}
              className="block pl-3 pr-4 py-2 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
            >
              <TranslatedText text={item.label} />
            </Link>
          ))}
          <button
            onClick={toggleDarkMode}
            className="w-full text-left pl-3 pr-4 py-2 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 flex items-center"
          >
            <span className="mr-2">
              {isDarkMode ? (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
              ) : (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                </svg>
              )}
            </span>
            <TranslatedText text={isDarkMode ? 'Light Mode' : 'Dark Mode'} />
          </button>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

================
File: frontend/src/components/Navigation.js
================
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import LanguageSelector from './LanguageSelector';

function Navigation() {
    const { user, logout } = useAuth();
    const location = useLocation();

    const isActive = (path) => {
        return location.pathname === path ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white';
    };

    return (
        <nav className="bg-gray-800">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex items-center justify-between h-16">
                    <div className="flex items-center">
                        <div className="flex-shrink-0">
                            <img className="h-8 w-8" src="/logo.png" alt="GoatSquad" />
                        </div>
                        <div className="hidden md:block">
                            <div className="ml-10 flex items-baseline space-x-4">
                                <Link 
                                    to="/" 
                                    className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/')}`}
                                >
                                    Home
                                </Link>
                                <Link 
                                    to="/news" 
                                    className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/news')}`}
                                >
                                    News
                                </Link>
                                <Link 
                                    to="/calendar" 
                                    className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/calendar')}`}
                                >
                                    Calendar
                                </Link>
                                <Link 
                                    to="/preferences" 
                                    className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/preferences')}`}
                                >
                                    Preferences
                                </Link>
                                <Link 
                                    to="/button" 
                                    className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/button')}`}
                                >
                                    Interactive
                                </Link>
                            </div>
                        </div>
                    </div>
                    <div className="hidden md:block">
                        <div className="ml-4 flex items-center md:ml-6">
                            <LanguageSelector />
                            <Link 
                                to="/profile"
                                className={`ml-3 px-3 py-2 rounded-md text-sm font-medium ${isActive('/profile')}`}
                            >
                                Profile
                            </Link>
                            <button
                                onClick={logout}
                                className="ml-3 px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:bg-gray-700 hover:text-white"
                            >
                                Logout
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    );
}

export default Navigation;

================
File: frontend/src/components/NewsDigest.js
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ReactMarkdown from 'react-markdown';
import DOMPurify from 'dompurify';
import TranslatedText from './TranslatedText';

function NewsDigest({ teams, players }) {
  const [digests, setDigests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [highlights, setHighlights] = useState([]);

  // Add debug logging
  useEffect(() => {
    console.log('NewsDigest received props:', { teams, players });
  }, [teams, players]);

  // Fetch digests for all teams and players
  useEffect(() => {
    const fetchDigests = async () => {
      if (!teams?.length && !players?.length) {
        console.log('No teams or players to fetch digests for');
        return;
      }
      
      setLoading(true);
      setError(null);
      
      try {
        const teamNames = teams.map(team => team.name).filter(Boolean);
        const playerNames = players.map(player => player.fullName).filter(Boolean);

        console.log('Fetching digests with params:', {
          teams: teamNames,
          players: playerNames
        });

        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/news/digest`, {
          params: {
            'teams[]': teamNames,
            'players[]': playerNames
          },
          paramsSerializer: params => {
            const searchParams = new URLSearchParams();
            Object.entries(params).forEach(([key, values]) => {
              if (Array.isArray(values)) {
                values.forEach(value => searchParams.append(key, value));
              } else {
                searchParams.append(key, values);
              }
            });
            return searchParams.toString();
          }
        });

        console.log('Digest response:', response.data);
        
        if (response.data.success && response.data.digests) {
          setDigests(response.data.digests);
        } else {
          console.error('Invalid digest response:', response.data);
          setError('Invalid response format from server');
        }
      } catch (err) {
        console.error('Error fetching digests:', err);
        setError(err.message || 'Failed to fetch news digests');
      } finally {
        setLoading(false);
      }
    };

    fetchDigests();
  }, [teams, players]);

  // Updated highlights fetch
  useEffect(() => {
    const fetchHighlights = async () => {
      if (!teams?.length && !players?.length) return;
      
      try {
        // Fetch highlights for teams
        const teamHighlights = await Promise.all(
          teams.slice(0, 3).map(async team => {
            try {
              const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/mlb/highlights`, {
                params: { team_id: team.id }
              });
              return {
                type: 'team',
                subject: team.name,
                highlight: response.data.highlights?.[0] || {
                  title: `Featured ${team.name} Highlight`,
                  description: `Watch the latest ${team.name} action`,
                  url: 'https://mlb-cuts-diamond.mlb.com/FORGE/2024/2024-03/28/b0e6e6d3-0b9b0b9b-0b9b0b9b-csvm-diamondx64-asset_1280x720_59_4000K.mp4',
                  date: new Date().toISOString(),
                  blurb: `Featured ${team.name} highlight`
                }
              };
            } catch (error) {
              console.error(`Error fetching highlights for team ${team.name}:`, error);
              return null;
            }
          })
        );

        // Fetch highlights for players
        const playerHighlights = await Promise.all(
          players.slice(0, 3).map(async player => {
            try {
              const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/mlb/highlights`, {
                params: { player_id: player.id }
              });
              return {
                type: 'player',
                subject: player.fullName,
                highlight: response.data.highlights?.[0] || {
                  title: `Featured ${player.fullName} Highlight`,
                  description: `Watch the latest ${player.fullName} action`,
                  url: 'https://mlb-cuts-diamond.mlb.com/FORGE/2024/2024-03/28/b0e6e6d3-0b9b0b9b-0b9b0b9b-csvm-diamondx64-asset_1280x720_59_4000K.mp4',
                  date: new Date().toISOString(),
                  blurb: `Featured ${player.fullName} highlight`
                }
              };
            } catch (error) {
              console.error(`Error fetching highlights for player ${player.fullName}:`, error);
              return null;
            }
          })
        );

        // Filter out null values and combine highlights
        const validHighlights = [...teamHighlights, ...playerHighlights].filter(Boolean);
        setHighlights(validHighlights);

      } catch (err) {
        console.error('Error fetching highlights:', err);
        // Set default highlights
        const defaultHighlights = [
          ...teams.slice(0, 3).map(team => ({
            type: 'team',
            subject: team.name,
            highlight: {
              title: `Featured ${team.name} Highlight`,
              description: `Watch the latest ${team.name} action`,
              url: 'https://mlb-cuts-diamond.mlb.com/FORGE/2024/2024-03/28/b0e6e6d3-0b9b0b9b-0b9b0b9b-csvm-diamondx64-asset_1280x720_59_4000K.mp4',
              date: new Date().toISOString(),
              blurb: `Featured ${team.name} highlight`
            }
          })),
          ...players.slice(0, 3).map(player => ({
            type: 'player',
            subject: player.fullName,
            highlight: {
              title: `Featured ${player.fullName} Highlight`,
              description: `Watch the latest ${player.fullName} action`,
              url: 'https://mlb-cuts-diamond.mlb.com/FORGE/2024/2024-03/28/b0e6e6d3-0b9b0b9b-0b9b0b9b-csvm-diamondx64-asset_1280x720_59_4000K.mp4',
              date: new Date().toISOString(),
              blurb: `Featured ${player.fullName} highlight`
            }
          }))
        ];
        setHighlights(defaultHighlights);
      }
    };

    fetchHighlights();
  }, [teams, players]);

  const parseSourceLinks = (sourcesHtml) => {
    try {
      // Create a temporary div to parse the HTML
      const div = document.createElement('div');
      // Sanitize the HTML first
      div.innerHTML = DOMPurify.sanitize(sourcesHtml);
      
      // Find all chip links
      const chips = div.querySelectorAll('a.chip');
      return Array.from(chips).map(chip => ({
        text: chip.textContent,
        url: chip.href
      }));
    } catch (error) {
      console.error('Error parsing sources:', error);
      return [];
    }
  };

  // Update the helper function to handle non-string content
  const splitContentIntoSentences = (content) => {
    if (!content) return [];
    const textContent = renderContent(content);
    // Split by periods, exclamation marks, or question marks followed by spaces or newlines
    // but preserve the punctuation
    return textContent.match(/[^.!?]+[.!?]+/g) || [textContent];
  };

  // Update the components to handle non-string content
  const renderContent = (content) => {
    if (!content) return '';
    
    // If content is an array, join it
    if (Array.isArray(content)) {
      return content.map(item => renderContent(item)).join(' ');
    }
    
    // If content is a React element with props.children
    if (content.props && content.props.children) {
      return renderContent(content.props.children);
    }
    
    // If content is an object but not a React element
    if (typeof content === 'object') {
      return content.toString();
    }
    
    // If content is already a string or number
    return String(content);
  };

  if (loading) {
    return (
      <div className="space-y-6">
        {[1, 2, 3].map((i) => (
          <div key={i} className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow fade-in">
            <div className="animate-pulse space-y-4">
              <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
              <div className="space-y-3">
                <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-2/3"></div>
                <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (error && !digests.length && !highlights.length) {
    return (
      <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
        <div className="text-red-600 dark:text-red-400">
          <TranslatedText text={`Error: ${error}`} />
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 slide-up">
      {/* News Digests */}
      {digests.map((digest, index) => (
        <div key={index} className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
          <h2 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
            <TranslatedText text={`${digest.type === 'team' ? 'Team Update' : 'Player Spotlight'}: ${digest.subject}`} />
          </h2>
          
          <div className="prose dark:prose-invert prose-headings:text-gray-900 dark:prose-headings:text-white prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-strong:text-gray-900 dark:prose-strong:text-white prose-ul:text-gray-700 dark:prose-ul:text-gray-300 prose-li:text-gray-700 dark:prose-li:text-gray-300 max-w-none">
            <ReactMarkdown
              components={{
                // Update the paragraph component to handle sentences
                p: ({node, ...props}) => {
                  const text = renderContent(props.children);
                  const sentences = splitContentIntoSentences(text);
                  return (
                    <p className="mb-4 text-gray-700 dark:text-gray-300">
                      {sentences.map((sentence, idx) => (
                        <React.Fragment key={idx}>
                          <TranslatedText text={sentence.trim()} />
                          {idx < sentences.length - 1 ? ' ' : ''}
                        </React.Fragment>
                      ))}
                    </p>
                  );
                },
                // Update other components similarly
                h1: ({node, ...props}) => (
                  <h1 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
                    <TranslatedText text={renderContent(props.children)} />
                  </h1>
                ),
                h2: ({node, ...props}) => (
                  <h2 className="text-xl font-semibold mb-3 text-gray-800 dark:text-gray-100">
                    <TranslatedText text={renderContent(props.children)} />
                  </h2>
                ),
                h3: ({node, ...props}) => (
                  <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-200">
                    <TranslatedText text={renderContent(props.children)} />
                  </h3>
                ),
                li: ({node, ...props}) => {
                  const text = renderContent(props.children);
                  const sentences = splitContentIntoSentences(text);
                  return (
                    <li className="mb-2 text-gray-700 dark:text-gray-300">
                      {sentences.map((sentence, idx) => (
                        <React.Fragment key={idx}>
                          <TranslatedText text={sentence.trim()} />
                          {idx < sentences.length - 1 ? ' ' : ''}
                        </React.Fragment>
                      ))}
                    </li>
                  );
                },
                ul: ({node, ...props}) => (
                  <ul className="list-disc pl-6 mb-4 text-gray-700 dark:text-gray-300">
                    {props.children}
                  </ul>
                ),
                strong: ({node, ...props}) => (
                  <strong className="font-semibold text-gray-900 dark:text-white">
                    <TranslatedText text={renderContent(props.children)} />
                  </strong>
                )
              }}
            >
              {digest.content}
            </ReactMarkdown>
          </div>

          {/* Sources Section */}
          {digest.sources && (
            <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
              <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-3">
                <TranslatedText text="Sources" />
              </h3>
              <div className="flex flex-wrap gap-2">
                {parseSourceLinks(digest.sources).map((source, index) => (
                  <a
                    key={index}
                    href={source.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center px-3 py-1 rounded-full text-sm 
                      bg-gray-100 dark:bg-gray-700 
                      text-gray-700 dark:text-gray-300 
                      hover:bg-gray-200 dark:hover:bg-gray-600 
                      transition-colors duration-200"
                  >
                    <TranslatedText text={source.text} />
                  </a>
                ))}
              </div>
            </div>
          )}

          {/* Timestamp */}
          {digest.timestamp && (
            <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
              <TranslatedText text={`Generated at: ${new Date(digest.timestamp).toLocaleString()}`} />
            </div>
          )}
        </div>
      ))}

      {/* Highlights Section */}
      {highlights.length > 0 && (
        <div className="space-y-6">
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
            <TranslatedText text="Recent Highlights" />
          </h2>
          {highlights.map((item, index) => (
            <div key={index} className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
              <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">
                <TranslatedText 
                  text={`${item.type === 'team' ? 'Team Highlight: ' : 'Player Highlight: '} ${item.subject}`}
                />
              </h3>
              {item.highlight?.url ? (
                <div className="aspect-w-16 aspect-h-9 bg-gray-100 dark:bg-gray-900 rounded-lg overflow-hidden mb-4">
                  <video
                    className="w-full h-full object-contain"
                    controls
                    playsInline
                    preload="metadata"
                  >
                    <source src={item.highlight.url} type="video/mp4" />
                    <TranslatedText text="Your browser does not support the video tag." />
                  </video>
                </div>
              ) : (
                <div className="aspect-w-16 aspect-h-9 bg-gray-100 dark:bg-gray-900 rounded-lg flex items-center justify-center mb-4">
                  <p className="text-gray-500 dark:text-gray-400 text-sm">
                    <TranslatedText text="No highlight available" />
                  </p>
                </div>
              )}
              {item.highlight?.description && (
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                  <TranslatedText text={item.highlight.description} />
                </p>
              )}
              {item.highlight?.date && (
                <p className="text-xs text-gray-500 dark:text-gray-500">
                  <TranslatedText text={new Date(item.highlight.date).toLocaleDateString()} />
                </p>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default NewsDigest;

================
File: frontend/src/components/PageTransition.js
================
import { motion } from 'framer-motion';

const PageTransition = ({ children }) => {
  return (
    <motion.div
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: 20 }}
      transition={{ 
        type: "spring",
        stiffness: 260,
        damping: 20
      }}
    >
      {children}
    </motion.div>
  );
};

export default PageTransition;

================
File: frontend/src/components/ProtectedRoute.js
================
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

function ProtectedRoute({ children }) {
  const { isAuthenticated } = useAuth();
  const location = useLocation();

  if (!isAuthenticated) {
    // Save the attempted URL for redirecting after login
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return children;
}

export default ProtectedRoute;

================
File: frontend/src/components/Sidebar.js
================
import React from 'react';
import { Link } from 'react-router-dom';

const Sidebar = () => {
  return (
    <div className="w-64 bg-white shadow-sm">
      <nav className="mt-5 px-2">
        <Link to="/" className="group flex items-center px-2 py-2 text-base leading-6 font-medium text-gray-900 hover:text-gray-900 hover:bg-gray-100">
          Home
        </Link>
        <Link to="/news" className="mt-1 group flex items-center px-2 py-2 text-base leading-6 font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100">
          News
        </Link>
        <Link to="/calendar" className="mt-1 group flex items-center px-2 py-2 text-base leading-6 font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100">
          Calendar
        </Link>
        <Link to="/preferences" className="mt-1 group flex items-center px-2 py-2 text-base leading-6 font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100">
          Preferences
        </Link>
      </nav>
    </div>
  );
};

export default Sidebar;

================
File: frontend/src/components/TeamPlayerSelector.js
================
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import TranslatedText from './TranslatedText';
import { fetchTeams } from '../services/dataService';
import { retry } from '../utils/retry';

function TeamPlayerSelector({ onSelect, followedTeams = [], followedPlayers = [] }) {
  const [teams, setTeams] = useState([]);
  const [rostersByTeam, setRostersByTeam] = useState({});
  const [selectedTeamFilter, setSelectedTeamFilter] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchType, setSearchType] = useState('teams');
  const [error, setError] = useState(null);
  const [rosterLoading, setRosterLoading] = useState(false);

  // Move fetchRoster into useCallback
  const fetchRoster = useCallback(async (teamId) => {
    if (!teamId || rostersByTeam[teamId]) return;
    
    setRosterLoading(true);
    try {
      console.log('Fetching roster from:', `${process.env.REACT_APP_BACKEND_URL}/api/mlb/roster/${teamId}`);
      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/mlb/roster/${teamId}`);
      console.log('Roster response:', response.data);
      
      if (response.data && response.data.roster) {
        setRostersByTeam(prev => ({
          ...prev,
          [teamId]: response.data.roster
        }));
      } else {
        throw new Error('Invalid roster response format');
      }
    } catch (error) {
      console.error('Error fetching roster:', error);
      setRostersByTeam(prev => ({
        ...prev,
        [teamId]: []
      }));
    } finally {
      setRosterLoading(false);
    }
  }, [rostersByTeam]); // Add rostersByTeam as dependency

  // Fetch teams on mount
  useEffect(() => {
    const fetchTeams = async () => {
      try {
        console.log('Fetching teams...');
        setLoading(true);
        setError(null);
        
        // Add retry logic
        const teams = await retry(
          async () => {
            const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/mlb/teams`, {
              timeout: 15000,
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              }
            });
            
            if (!response.data?.teams) throw new Error('Invalid response format');
            return response.data.teams;
          },
          {
            retries: 3,
            delay: 1000,
            onRetry: (error, attempt) => {
              console.log(`Retry attempt ${attempt} due to:`, error);
            }
          }
        );

        const sortedTeams = teams.sort((a, b) => a.name.localeCompare(b.name));
        setTeams(sortedTeams);
        
      } catch (error) {
        console.error('Error fetching teams:', error);
        setError(error.message || 'Failed to fetch teams');
        setTeams([]);
      } finally {
        setLoading(false);
      }
    };

    fetchTeams();
  }, []);

  // Fetch roster when team filter changes
  useEffect(() => {
    if (selectedTeamFilter) {
      fetchRoster(selectedTeamFilter);
    }
  }, [selectedTeamFilter, fetchRoster]); // fetchRoster is now stable

  // Get current filtered and searched players
  const getCurrentPlayers = () => {
    if (!selectedTeamFilter) return [];
    const roster = rostersByTeam[selectedTeamFilter] || [];
    return roster.filter(player => 
      player.person.fullName.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  // Pre-fetch rosters for followed players' teams
  useEffect(() => {
    const fetchFollowedPlayersRosters = async () => {
      const teamIds = new Set(followedTeams.map(team => team.id));
      const promises = Array.from(teamIds)
        .filter(teamId => !rostersByTeam[teamId])
        .map(teamId => fetchRoster(teamId));
      
      await Promise.all(promises);
    };

    fetchFollowedPlayersRosters();
  }, [followedTeams, fetchRoster, rostersByTeam]); // fetchRoster is now stable

  const handleSelection = ({ team, player }) => {
    console.log('Selected team:', team);  // Debug log
    console.log('Selected player:', player);  // Debug log
    
    if (team) {
      // Check if team is already followed
      const isAlreadyFollowed = followedTeams.some(t => t.id === team.id);
      if (!isAlreadyFollowed) {
        onSelect({ team });
      }
    } else if (player) {
      // Check if player is already followed
      const isAlreadyFollowed = followedPlayers.some(p => p.id === player.id);
      if (!isAlreadyFollowed) {
        onSelect({ player });
      }
    }
  };

  if (loading && !teams.length) {
    return (
      <div className="flex justify-center items-center py-20">
        <div 
          role="status"
          className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"
        >
          <span className="sr-only">Loading...</span>
        </div>
      </div>
    );
  }

  if (error && !teams.length) {
    return (
      <div className="text-center py-8">
        <div className="text-red-500 dark:text-red-400 mb-4">
          <TranslatedText 
            text="Failed to fetch teams" 
            data-testid="translated-failed-to-fetch-teams" 
          />
        </div>
        <button
          onClick={() => {
            setError(null);
            fetchTeams();
          }}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          <TranslatedText 
            text="Retry" 
            data-testid="translated-retry" 
          />
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Search input */}
      <div className="w-full">
        <label htmlFor="search" className="block text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
          <TranslatedText text="Search teams or players" />
        </label>
        <div className="relative">
          <input
            type="text"
            name="search"
            id="search"
            className="w-full px-4 py-3 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg
              text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400
              focus:ring-2 focus:ring-blue-500 focus:border-blue-500
              transition-colors duration-200"
            placeholder={searchType === 'teams' ? 'Search teams...' : 'Search players...'}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>

      {/* Toggle buttons */}
      <div className="flex space-x-4 mt-4">
        <button
          onClick={() => setSearchType('teams')}
          className={`px-6 py-3 rounded-lg transition-colors duration-200 ${
            searchType === 'teams'
              ? 'bg-blue-600 text-white dark:bg-blue-500'
              : 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600'
          }`}
        >
          <TranslatedText text="Teams" />
        </button>
        <button
          onClick={() => setSearchType('players')}
          className={`px-6 py-3 rounded-lg transition-colors duration-200 ${
            searchType === 'players'
              ? 'bg-blue-600 text-white dark:bg-blue-500'
              : 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600'
          }`}
        >
          <TranslatedText text="Players" />
        </button>
      </div>

      {/* Results list */}
      <div className="mt-4">
        {searchType === 'teams' ? (
          <div className="space-y-8">
            {/* Teams Section */}
            <section>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                  <TranslatedText text="Teams" />
                </h2>
                <span className="text-gray-600 dark:text-gray-400">
                  {followedTeams.length} followed
                </span>
              </div>
              
              {teams.length > 0 ? (
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {teams
                    .filter(team => 
                      team.name.toLowerCase().includes(searchQuery.toLowerCase())
                    )
                    .map((team) => {
                      const isFollowed = followedTeams.some(t => t.id === team.id);
                      return (
                        <button
                          key={team.id}
                          onClick={() => handleSelection({ team })}
                          disabled={isFollowed}
                          className={`p-4 rounded-lg border transition-all duration-200 ${
                            isFollowed
                              ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 cursor-not-allowed opacity-70'
                              : 'border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-500 bg-white dark:bg-gray-800'
                          }`}
                        >
                          <div className="flex flex-col items-center">
                            <img
                              src={`https://www.mlbstatic.com/team-logos/${team.id}.svg`}
                              alt={team.name}
                              className="w-16 h-16 object-contain mb-2"
                              onError={(e) => {
                                e.target.onerror = null;
                                e.target.src = '/images/default-team-logo.png';
                              }}
                            />
                            <p className="text-sm font-medium text-center text-gray-900 dark:text-gray-100">
                              {team.name}
                            </p>
                          </div>
                        </button>
                      );
                    })}
                </div>
              ) : (
                <div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                  <p className="text-gray-600 dark:text-gray-400">
                    <TranslatedText text="No teams found" />
                  </p>
                </div>
              )}
            </section>
          </div>
        ) : (
          <div className="space-y-8">
            {/* Players Section */}
            <section>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Players</h2>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {followedPlayers.length} followed
                </span>
              </div>

              {/* Filter Controls */}
              <div className="flex flex-col md:flex-row gap-4 mb-6">
                {/* Team Filter Dropdown */}
                <div className="flex-1">
                  <select
                    value={selectedTeamFilter || ''}
                    onChange={(e) => setSelectedTeamFilter(e.target.value || null)}
                    className="w-full rounded-lg border border-gray-300 dark:border-gray-600 
                      bg-white dark:bg-gray-700 text-gray-900 dark:text-white 
                      py-2 px-3 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="">Select a team to filter players</option>
                    {teams.map(team => (
                      <option key={team.id} value={team.id}>
                        {team.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Players Grid */}
              {rosterLoading ? (
                <div className="flex justify-center items-center py-12">
                  <div 
                    role="status"
                    className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"
                  >
                    <span className="sr-only">Loading...</span>
                  </div>
                </div>
              ) : selectedTeamFilter && getCurrentPlayers().length > 0 ? (
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {getCurrentPlayers().map((player, index) => (
                    <button
                      key={player.person.id}
                      onClick={() => handleSelection({ player: player.person })}
                      disabled={followedPlayers.some(p => p.id === player.person.id)}
                      className={`p-4 rounded-lg border transition-all duration-200
                        ${followedPlayers.some(p => p.id === player.person.id)
                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                          : 'border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-500 bg-white dark:bg-gray-800'
                        }`}
                    >
                      <div className="flex flex-col items-center">
                        <div className="w-16 h-16 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center mb-2">
                          <span className="text-2xl font-bold text-gray-600 dark:text-gray-300">
                            {player.person.primaryNumber || '#'}
                          </span>
                        </div>
                        <p className="text-sm font-medium text-center text-gray-900 dark:text-white">
                          {player.person.fullName}
                        </p>
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                          {player.position.abbreviation}
                        </p>
                      </div>
                    </button>
                  ))}
                </div>
              ) : selectedTeamFilter ? (
                <div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                  <p className="text-gray-600 dark:text-gray-400">
                    <TranslatedText text="No players found for the selected team" />
                  </p>
                </div>
              ) : (
                <div className="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                  <p className="text-gray-600 dark:text-gray-400">
                    <TranslatedText text="Select a team to view players" />
                  </p>
                </div>
              )}
            </section>
          </div>
        )}
      </div>
    </div>
  );
}

export default TeamPlayerSelector;

================
File: frontend/src/components/TranslatedText.js
================
import React, { useState, useEffect } from 'react';
import { translationService } from '../services/translationService';
import { useLanguage } from '../contexts/LanguageContext';

function TranslatedText({ text, ...props }) {
  const [translatedText, setTranslatedText] = useState(text);
  const { language } = useLanguage();

  useEffect(() => {
    const translateText = async () => {
      if (language !== 'en') {
        const translated = await translationService.translate(text, language);
        setTranslatedText(translated);
      } else {
        setTranslatedText(text);
      }
    };

    translateText();
  }, [text, language]);

  return <span {...props}>{translatedText}</span>;
}

export default TranslatedText;

================
File: frontend/src/components/ui/Button.js
================
import React from 'react';

function Button({ children, variant = 'primary', ...props }) {
  const baseClasses = 'px-4 py-2 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200';
  
  const variants = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white dark:bg-blue-500 dark:hover:bg-blue-600 focus:ring-blue-500',
    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-900 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-100 focus:ring-gray-500',
    danger: 'bg-red-600 hover:bg-red-700 text-white dark:bg-red-500 dark:hover:bg-red-600 focus:ring-red-500',
  };

  return (
    <button
      className={`${baseClasses} ${variants[variant]}`}
      {...props}
    >
      {children}
    </button>
  );
}

export default Button;

================
File: frontend/src/constants/index.js
================
export const API_ENDPOINTS = {
  MLB_TEAMS: 'https://statsapi.mlb.com/api/v1/teams?sportId=1',
  MLB_ROSTER: (teamId) => `https://statsapi.mlb.com/api/v1/teams/${teamId}/roster?season=2024`,
  TEAM_LOGO: (teamId) => `https://www.mlbstatic.com/team-logos/${teamId}.svg`
};

export const STORAGE_KEYS = {
  AUTH_TOKEN: 'authToken',
  FOLLOWED_TEAMS: 'followedTeams',
  FOLLOWED_PLAYERS: 'followedPlayers',
  SELECTED_TEAM: 'selectedTeam',
  SELECTED_PLAYER: 'selectedPlayer'
};

export const VIDEO_URL = "https://mlb-cuts-diamond.mlb.com/FORGE/2024/2024-10/25/1f63eb4b-5d716856-889ba75a-csvm-diamondgcp-asset_1280x720_59_4000K.mp4";

================
File: frontend/src/contexts/AuthContext.js
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState(null);

  // Check for existing token on mount
  useEffect(() => {
    const checkAuth = async () => {
      const token = localStorage.getItem('auth_token');
      if (token) {
        try {
          // Set up axios default header
          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
          // Verify token by fetching user profile
          const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/auth/profile`);
          if (response.data.success) {
            setUser(response.data.user);
            setIsAuthenticated(true);
          } else {
            // If verification fails, clear everything
            logout();
          }
        } catch (error) {
          console.error('Auth verification failed:', error);
          logout();
        }
      }
      setIsLoading(false);
    };

    checkAuth();
  }, []);

  const login = async (token) => {
    try {
      localStorage.setItem('auth_token', token);
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      
      // Fetch user profile immediately after login
      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/auth/profile`);
      if (response.data.success) {
        setUser(response.data.user);
        setIsAuthenticated(true);
      } else {
        throw new Error('Failed to fetch user profile');
      }
    } catch (error) {
      console.error('Login failed:', error);
      logout();
      throw error;
    }
  };

  const logout = () => {
    localStorage.removeItem('auth_token');
    delete axios.defaults.headers.common['Authorization'];
    setIsAuthenticated(false);
    setUser(null);
  };

  // Show loading state while checking authentication
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white"></div>
      </div>
    );
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout, user }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: frontend/src/contexts/LanguageContext.js
================
import React, { createContext, useContext, useState } from 'react';

const LanguageContext = createContext();

export function LanguageProvider({ children }) {
  const [language, setLanguage] = useState('en');

  const value = {
    language,
    setLanguage,
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}

================
File: frontend/src/hooks/useDarkMode.js
================
import { useState, useEffect } from 'react';

export function useDarkMode() {
  const [isDarkMode, setIsDarkMode] = useState(() => {
    const savedMode = localStorage.getItem('darkMode');
    return savedMode ? JSON.parse(savedMode) : 
      window.matchMedia('(prefers-color-scheme: dark)').matches;
  });

  useEffect(() => {
    const root = window.document.documentElement;
    if (isDarkMode) {
      root.classList.add('dark');
    } else {
      root.classList.remove('dark');
    }
    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));
  }, [isDarkMode]);

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  return { isDarkMode, toggleDarkMode };
}

================
File: frontend/src/hooks/usePreferences.js
================
import { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext';

export const usePreferences = () => {
  const [preferences, setPreferences] = useState({
    teams: [],
    players: []
  });
  const [isLoading, setIsLoading] = useState(true);
  const { isAuthenticated } = useAuth();

  // Load preferences from API
  useEffect(() => {
    const loadPreferences = async () => {
      if (!isAuthenticated) {
        setIsLoading(false);
        return;
      }

      setIsLoading(true);
      try {
        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/preferences`);
        if (response.data.success) {
          setPreferences(response.data.preferences);
        }
      } catch (error) {
        console.error('Error loading preferences:', error);
        setPreferences({ teams: [], players: [] });
      } finally {
        setIsLoading(false);
      }
    };

    loadPreferences();
  }, [isAuthenticated]);

  const savePreferences = async (newPreferences) => {
    try {
      const response = await axios.put(
        `${process.env.REACT_APP_BACKEND_URL}/api/preferences`,
        newPreferences
      );
      if (response.data.success) {
        setPreferences(response.data.preferences);
      }
    } catch (error) {
      console.error('Error saving preferences:', error);
      throw error;
    }
  };

  const followTeam = async (team) => {
    if (!team || !team.id) return;
    
    const teamToStore = {
      id: team.id,
      name: team.name,
      abbreviation: team.abbreviation,
      teamName: team.teamName,
      locationName: team.locationName,
      shortName: team.shortName
    };

    const updatedTeams = [...preferences.teams, teamToStore];
    await savePreferences({
      ...preferences,
      teams: updatedTeams
    });
  };

  const followPlayer = async (player) => {
    if (!player || !player.id) return;
    
    const playerToStore = {
      id: player.id,
      fullName: player.fullName,
      firstName: player.firstName,
      lastName: player.lastName,
      primaryNumber: player.primaryNumber,
      primaryPosition: player.position ? {
        code: player.position.code,
        name: player.position.name,
        type: player.position.type,
        abbreviation: player.position.abbreviation
      } : null
    };

    const updatedPlayers = [...preferences.players, playerToStore];
    await savePreferences({
      ...preferences,
      players: updatedPlayers
    });
  };

  const unfollowTeam = async (teamId) => {
    const updatedTeams = preferences.teams.filter(t => t.id !== teamId);
    await savePreferences({
      ...preferences,
      teams: updatedTeams
    });
  };

  const unfollowPlayer = async (playerId) => {
    const updatedPlayers = preferences.players.filter(p => p.id !== playerId);
    await savePreferences({
      ...preferences,
      players: updatedPlayers
    });
  };

  const clearPreferences = async () => {
    await savePreferences({ teams: [], players: [] });
  };

  return {
    preferences,
    isLoading,
    followTeam,
    unfollowTeam,
    followPlayer,
    unfollowPlayer,
    clearPreferences
  };
};

================
File: frontend/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    min-height: 100vh;
    @apply bg-gray-50 dark:bg-gray-900;
  }
}

/* Add these styles to prevent layout shift */
html {
  scrollbar-gutter: stable;
  overflow-y: scroll;
}

/* Optional: Style the scrollbar to be less obtrusive */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background-color: rgba(156, 163, 175, 0.5);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: rgba(156, 163, 175, 0.7);
}

================
File: frontend/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import './styles/tailwind.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: frontend/src/layouts/MainLayout.js
================
import React from 'react';
import Navbar from '../components/Navbar';

function MainLayout({ children }) {
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-200">
      <Navbar />
      <div className="flex-1 flex flex-col overflow-hidden">
        <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-50 dark:bg-gray-900">
          {children}
        </main>
      </div>
    </div>
  );
}

export default MainLayout;

================
File: frontend/src/pages/ButtonPage.js
================
import React, { useState } from 'react';
import axios from 'axios';
import PageTransition from '../components/PageTransition';

function ButtonPage() {
    const [response, setResponse] = useState(null);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(false);

    const handleClick = async () => {
        try {
            setLoading(true);
            setError(null);
            const result = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/api/button-click`);
            setResponse(result.data);
        } catch (err) {
            setError(err.response?.data?.message || 'An error occurred');
        } finally {
            setLoading(false);
        }
    };

    return (
        <PageTransition>
            <div className="min-h-screen bg-gray-100 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
                <div className="max-w-md mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                    <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
                        Interactive Button Page
                    </h1>
                    
                    <button
                        onClick={handleClick}
                        disabled={loading}
                        className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50"
                    >
                        {loading ? 'Processing...' : 'Click Me!'}
                    </button>

                    {error && (
                        <div className="mt-4 p-3 bg-red-100 text-red-700 rounded">
                            {error}
                        </div>
                    )}

                    {response && (
                        <div className="mt-4 p-4 bg-green-100 dark:bg-green-900 rounded">
                            <h2 className="font-bold text-green-800 dark:text-green-200">
                                Response:
                            </h2>
                            <pre className="mt-2 whitespace-pre-wrap text-sm text-green-700 dark:text-green-300">
                                {JSON.stringify(response, null, 2)}
                            </pre>
                        </div>
                    )}
                </div>
            </div>
        </PageTransition>
    );
}

export default ButtonPage;

================
File: frontend/src/pages/Home.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import TranslatedText from '../components/TranslatedText';
import PageTransition from '../components/PageTransition';

function Home() {
  const features = [
    {
      name: 'Calendar',
      description: 'View your team\'s schedule and upcoming games',
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      ),
      href: '/calendar'
    },
    {
      name: 'News',
      description: 'Stay updated with the latest MLB news and highlights',
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9.5a2.5 2.5 0 00-2.5-2.5H15M9 11l3 3m0 0l3-3m-3 3V8" />
        </svg>
      ),
      href: '/news'
    },
    {
      name: 'Preferences',
      description: 'Customize your experience and team selection',
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
      ),
      href: '/preferences'
    }
  ];

  return (
    <PageTransition>
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8 mt-16">
        <div className="text-center">
          <h2 className="text-3xl font-extrabold text-gray-900 dark:text-white sm:text-4xl">
            <TranslatedText text="Welcome to GoatSquad" />
          </h2>
          <p className="mt-4 text-xl text-gray-500 dark:text-gray-400">
            <TranslatedText text="Your personalized MLB experience starts here" />
          </p>
        </div>

        <div className="mt-12">
          <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {features.map((feature) => (
              <Link
                key={feature.name}
                to={feature.href}
                className="relative group"
              >
                <div className="h-full flex flex-col justify-between rounded-lg border border-gray-200 dark:border-gray-700 p-6 bg-white dark:bg-gray-800 shadow-sm transition-all duration-200 hover:shadow-lg">
                  <div>
                    <div className="flex items-center justify-center h-12 w-12 rounded-md bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300">
                      {feature.icon}
                    </div>
                    <h3 className="mt-4 text-lg font-medium text-gray-900 dark:text-white">
                      <TranslatedText text={feature.name} />
                    </h3>
                    <p className="mt-2 text-base text-gray-500 dark:text-gray-400">
                      <TranslatedText text={feature.description} />
                    </p>
                  </div>
                  <div className="mt-4 flex items-center text-blue-600 dark:text-blue-400">
                    <span className="text-sm font-medium">
                      <TranslatedText text="Learn more" />
                    </span>
                    <svg 
                      className="ml-2 w-4 h-4 transition-transform duration-200 group-hover:translate-x-1" 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </div>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </div>
    </PageTransition>
  );
}

export default Home;

================
File: frontend/src/pages/Login.js
================
import React, { useState } from 'react';
import { useNavigate, useLocation, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useDarkMode } from '../hooks/useDarkMode';
import axios from 'axios';
import PageTransition from '../components/PageTransition';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { login } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const { isDarkMode, toggleDarkMode } = useDarkMode();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    try {
      console.log('Attempting login to:', `${process.env.REACT_APP_BACKEND_URL}/auth/login`);
      const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/auth/login`, {
        email,
        password
      });

      if (response.data.success && response.data.token) {
        await login(response.data.token);
        const from = location.state?.from?.pathname || '/';
        navigate(from);
      } else {
        setError(response.data.message || 'Invalid email or password');
      }
    } catch (err) {
      console.error('Full error:', err);
      if (err.code === 'ERR_NETWORK') {
        setError('Cannot connect to server. Please check if the backend is running.');
      } else {
        setError(err.response?.data?.message || err.message || 'Failed to log in');
      }
    }
  };

  const handleForgotPassword = (e) => {
    e.preventDefault();
    // Implement forgot password functionality or show a message
    alert('Forgot password functionality coming soon!');
  };

  return (
    <PageTransition>
      <div className={`min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8 ${isDarkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <div className="absolute top-4 right-4">
          <button
            onClick={toggleDarkMode}
            className={`p-2 rounded-lg ${isDarkMode ? 'text-gray-400 hover:text-white' : 'text-gray-600 hover:text-gray-900'}`}
            aria-label="Toggle dark mode"
          >
            {isDarkMode ? (
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" 
                />
              </svg>
            ) : (
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
                />
              </svg>
            )}
          </button>
        </div>

        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          {/* Logo */}
          <div className="flex justify-center">
            <img
              src="/images/logo.svg"
              alt="Logo"
              className={`w-48 h-24 ${isDarkMode ? 'filter invert' : ''}`}
            />
          </div>
          <h2 className={`mt-6 text-center text-3xl font-bold tracking-tight ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
            Sign in to your account
          </h2>
        </div>

        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
          <div className={`py-8 px-4 shadow sm:rounded-lg sm:px-10 ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
            <form className="space-y-6" onSubmit={handleSubmit}>
              <div>
                <label htmlFor="email" className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                  Email address
                </label>
                <div className="mt-1">
                  <input
                    id="email"
                    name="email"
                    type="email"
                    autoComplete="email"
                    required
                    className={`block w-full appearance-none rounded-md px-3 py-2 shadow-sm focus:outline-none focus:ring-indigo-500 sm:text-sm
                      ${isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-indigo-500' 
                        : 'border-gray-300 placeholder-gray-400 focus:border-indigo-500 bg-white text-gray-900'}`}
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
              </div>

              <div>
                <label htmlFor="password" className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                  Password
                </label>
                <div className="mt-1">
                  <input
                    id="password"
                    name="password"
                    type="password"
                    autoComplete="current-password"
                    required
                    className={`block w-full appearance-none rounded-md px-3 py-2 shadow-sm focus:outline-none focus:ring-indigo-500 sm:text-sm
                      ${isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-indigo-500' 
                        : 'border-gray-300 placeholder-gray-400 focus:border-indigo-500 bg-white text-gray-900'}`}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <input
                    id="remember-me"
                    name="remember-me"
                    type="checkbox"
                    className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                  />
                  <label htmlFor="remember-me" className={`ml-2 block text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>
                    Remember me
                  </label>
                </div>

                <button 
                  onClick={handleForgotPassword}
                  className="text-blue-600 hover:text-blue-800 underline"
                  type="button"
                >
                  Forgot password?
                </button>
              </div>

              <div>
                <button
                  type="submit"
                  className="flex w-full justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                >
                  Sign in
                </button>
              </div>
            </form>

            <div className="mt-6">
              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <div className={`w-full border-t ${isDarkMode ? 'border-gray-600' : 'border-gray-300'}`} />
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className={`px-2 ${isDarkMode ? 'bg-gray-800 text-gray-400' : 'bg-white text-gray-500'}`}>
                    Or continue with
                  </span>
                </div>
              </div>

              <div className="mt-6 grid grid-cols-2 gap-3">
                <button
                  type="button"
                  disabled
                  className={`inline-flex w-full justify-center rounded-md border py-2 px-4 text-sm font-medium shadow-sm opacity-50 cursor-not-allowed
                    ${isDarkMode 
                      ? 'border-gray-600 bg-gray-700 text-gray-200' 
                      : 'border-gray-300 bg-white text-gray-500'}`}
                >
                  <svg className="h-5 w-5" aria-hidden="true" viewBox="0 0 24 24">
                    <path
                      d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
                      fill="currentColor"
                    />
                  </svg>
                  <span className="ml-2">Google</span>
                </button>

                <button
                  type="button"
                  disabled
                  className={`inline-flex w-full justify-center rounded-md border py-2 px-4 text-sm font-medium shadow-sm opacity-50 cursor-not-allowed
                    ${isDarkMode 
                      ? 'border-gray-600 bg-gray-700 text-gray-200' 
                      : 'border-gray-300 bg-white text-gray-500'}`}
                >
                  <svg className="h-5 w-5" aria-hidden="true" viewBox="0 0 24 24">
                    <path
                      d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
                      fill="currentColor"
                    />
                  </svg>
                  <span className="ml-2">GitHub</span>
                </button>
              </div>
            </div>
          </div>

          {/* Free trial link */}
          <p className={`mt-4 text-center text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
            Not a member?{' '}
            <Link to="/register" className="font-medium text-indigo-500 hover:text-indigo-400">
              Create an account
            </Link>
          </p>
        </div>

        {/* Error message */}
        {error && (
          <div className="mt-4 sm:mx-auto sm:w-full sm:max-w-md">
            <div className={`rounded-md p-4 ${isDarkMode ? 'bg-red-900' : 'bg-red-50'}`}>
              <div className={`text-sm ${isDarkMode ? 'text-red-200' : 'text-red-700'}`}>{error}</div>
            </div>
          </div>
        )}
      </div>
    </PageTransition>
  );
}

export default Login;

================
File: frontend/src/pages/News.js
================
import React, { useEffect } from 'react';
import { Link } from 'react-router-dom';
import NewsDigest from '../components/NewsDigest';
import { usePreferences } from '../hooks/usePreferences';
import PageTransition from '../components/PageTransition';

function News() {
  const { preferences, isLoading } = usePreferences();

  useEffect(() => {
    console.log('Current preferences:', preferences);
  }, [preferences]);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (!preferences || (!preferences.teams.length && !preferences.players.length)) {
    return (
      <div className="min-h-[80vh] flex items-center justify-center fade-in">
        <div className="text-center max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
          <div className="mb-6">
            <svg 
              className="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500"
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M19 14l-7 7m0 0l-7-7m7 7V3"
              />
            </svg>
          </div>
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white mb-2">
            Set Your Preferences
          </h2>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            Choose your favorite team and player to get personalized MLB updates and highlights.
          </p>
          <Link
            to="/preferences"
            className="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800"
          >
            Choose Preferences
          </Link>
        </div>
      </div>
    );
  }

  console.log('Passing to NewsDigest:', {
    teams: preferences.teams,
    players: preferences.players
  });

  return (
    <PageTransition>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-16">
        <NewsDigest 
          teams={preferences.teams || []} 
          players={preferences.players || []} 
        />
      </div>
    </PageTransition>
  );
}

export default News;

================
File: frontend/src/pages/Preferences.js
================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import TeamPlayerSelector from '../components/TeamPlayerSelector';
import { usePreferences } from '../hooks/usePreferences';
import TranslatedText from '../components/TranslatedText';
import PageTransition from '../components/PageTransition';
import { fetchTeams } from '../services/dataService';

function Preferences() {
  const navigate = useNavigate();
  const { preferences, followTeam, unfollowTeam, followPlayer, unfollowPlayer } = usePreferences();
  const [isSaving, setIsSaving] = useState(false);
  const [playerData, setPlayerData] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch player data for followed players
  useEffect(() => {
    const fetchPlayerData = async () => {
      if (!preferences?.players) return;

      const newPlayerData = { ...playerData };
      const playersToFetch = preferences.players.filter(p => !playerData[p.id]);

      for (const player of playersToFetch) {
        try {
          const response = await axios.get(`https://statsapi.mlb.com/api/v1/people/${player.id}`);
          newPlayerData[player.id] = response.data.people[0];
        } catch (error) {
          console.error(`Error fetching data for player ${player.id}:`, error);
        }
      }

      if (Object.keys(newPlayerData).length > Object.keys(playerData).length) {
        setPlayerData(newPlayerData);
      }
    };

    fetchPlayerData();
  }, [preferences?.players, playerData]);

  useEffect(() => {
    const loadTeams = async () => {
      try {
        setLoading(true);
        setError(null);
        const teams = await fetchTeams();
        console.log('Teams loaded:', teams);
      } catch (err) {
        setError(err.message);
        console.error('Failed to load teams:', err);
      } finally {
        setLoading(false);
      }
    };

    loadTeams();
  }, []);

  const handleSelection = ({ team, player }) => {
    if (team) {
      // Check if team is already followed before adding
      const isAlreadyFollowed = preferences?.teams?.some(t => t.id === team.id);
      if (!isAlreadyFollowed) {
        followTeam(team);
      }
    }
    if (player) {
      // Check if player is already followed before adding
      const isAlreadyFollowed = preferences?.players?.some(p => p.id === player.id);
      if (!isAlreadyFollowed) {
        followPlayer(player);
      }
    }
  };

  const handleUnfollowTeam = (teamId) => {
    unfollowTeam(teamId);
  };

  const handleUnfollowPlayer = (playerId) => {
    unfollowPlayer(playerId);
  };

  const handleSave = () => {
    setIsSaving(true);
    window.dispatchEvent(new Event('preferenceUpdate'));
    
    setTimeout(() => {
      setIsSaving(false);
      navigate('/news');
    }, 500);
  };

  if (error) {
    return (
      <div className="text-red-500 dark:text-red-400 p-4">
        Error: {error}
      </div>
    );
  }

  return (
    <PageTransition>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-16">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-8">
          <TranslatedText text="Follow Teams & Players" />
        </h1>

        <div className="flex flex-col lg:flex-row gap-8">
          {/* Main content - Team/Player selector */}
          <div className="flex-1">
            <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
              <TeamPlayerSelector
                onSelect={handleSelection}
                followedTeams={preferences?.teams || []}
                followedPlayers={preferences?.players || []}
              />
            </div>
          </div>

          {/* Right sidebar - Selection summary and save button */}
          <div className="lg:w-96">
            <div className="sticky top-8">
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 space-y-6">
                {/* Followed Teams */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                    <TranslatedText text="Followed Teams" />
                  </h3>
                  <div className="space-y-2">
                    {preferences?.teams?.filter(team => team.name).length > 0 ? (
                      preferences.teams.map(team => (
                        <div key={team.id} 
                          className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg"
                        >
                          <span className="text-gray-900 dark:text-gray-100">
                            <TranslatedText text={team.name} />
                          </span>
                          <button
                            onClick={() => handleUnfollowTeam(team.id)}
                            className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
                          >
                            <TranslatedText text="Unfollow" />
                          </button>
                        </div>
                      ))
                    ) : (
                      <div className="text-center py-4 text-gray-500 dark:text-gray-400">
                        <TranslatedText text="No teams selected" />
                      </div>
                    )}
                  </div>
                </div>

                {/* Followed Players */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                    <TranslatedText text="Followed Players" />
                  </h3>
                  <div className="space-y-2">
                    {preferences?.players?.filter(player => player.fullName).length > 0 ? (
                      preferences.players.map(player => {
                        const fullPlayerData = playerData[player.id] || player;
                        return (
                          <div key={player.id} 
                            className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg"
                          >
                            <div className="flex flex-col">
                              <span className="text-gray-900 dark:text-gray-100">
                                <TranslatedText text={fullPlayerData.fullName} />
                              </span>
                              {fullPlayerData.primaryPosition && (
                                <span className="text-sm text-gray-500 dark:text-gray-400">
                                  <TranslatedText text={fullPlayerData.primaryPosition.abbreviation} />
                                </span>
                              )}
                            </div>
                            <button
                              onClick={() => handleUnfollowPlayer(player.id)}
                              className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
                            >
                              <TranslatedText text="Unfollow" />
                            </button>
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-center py-4 text-gray-500 dark:text-gray-400">
                        <TranslatedText text="No players selected" />
                      </div>
                    )}
                  </div>
                </div>

                {/* Save Button */}
                <button
                  onClick={handleSave}
                  className="w-full inline-flex items-center justify-center px-6 py-3 border border-transparent 
                    rounded-md shadow-sm text-base font-medium text-white bg-blue-600 hover:bg-blue-700 
                    dark:bg-blue-500 dark:hover:bg-blue-600 transition-colors duration-200
                    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 
                    dark:focus:ring-offset-gray-800"
                >
                  {isSaving ? (
                    <>
                      <svg 
                        className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" 
                        xmlns="http://www.w3.org/2000/svg" 
                        fill="none" 
                        viewBox="0 0 24 24"
                      >
                        <circle 
                          className="opacity-25" 
                          cx="12" 
                          cy="12" 
                          r="10" 
                          stroke="currentColor" 
                          strokeWidth="4"
                        />
                        <path 
                          className="opacity-75" 
                          fill="currentColor" 
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        />
                      </svg>
                      <TranslatedText text="Saving..." />
                    </>
                  ) : (
                    <TranslatedText text="Done" />
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Loading state */}
        {loading && (
          <div className="text-center py-4 text-gray-600 dark:text-gray-400">
            <TranslatedText text="Loading..." />
          </div>
        )}
      </div>
    </PageTransition>
  );
}

export default Preferences;

================
File: frontend/src/pages/Profile.js
================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { userService } from '../services/userService';
import PageTransition from '../components/PageTransition';

function Profile() {
  const { user } = useAuth();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    username: '',
    timezone: '',
    avatarUrl: ''
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);

  useEffect(() => {
    if (user) {
      setFormData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        username: user.username || '',
        timezone: user.timezone || 'UTC',
        avatarUrl: user.avatarUrl || '/images/default-avatar.jpg'
      });
      setIsLoading(false);
    }
  }, [user]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setIsSaving(true);

    try {
      const response = await userService.updateProfile(formData);
      if (response.success) {
        setSuccess('Profile updated successfully');
        setShowSuccess(true);
        // Auto-hide success message after 3 seconds
        setTimeout(() => {
          setShowSuccess(false);
          setSuccess('');
        }, 3000);
      } else {
        setError(response.message || 'Failed to update profile');
      }
    } catch (err) {
      setError(err.message || 'Failed to update profile');
    } finally {
      setIsSaving(false);
    }
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 1024 * 1024) { // 1MB
        setError('Image size must be less than 1MB');
        return;
      }

      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData(prev => ({
          ...prev,
          avatarUrl: reader.result
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white"></div>
      </div>
    );
  }

  return (
    <PageTransition>
      <div className="min-h-screen bg-gray-100 dark:bg-gray-900 pt-16">
        {/* Main Content */}
        <div className="max-w-7xl mx-auto px-4 py-10">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
            Personal Information
          </h2>
          <p className="text-gray-500 dark:text-gray-400 mb-8">
            Use a permanent address where you can receive mail.
          </p>

          <div className="space-y-6">
            {/* Avatar Section */}
            <div className="flex items-center space-x-4">
              <img
                src={formData.avatarUrl}
                alt="Profile"
                className="h-16 w-16 rounded-full object-cover"
              />
              <button
                type="button"
                onClick={() => document.getElementById('avatar-input').click()}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-white dark:bg-gray-700 dark:text-gray-200 rounded-md border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600"
              >
                Change avatar
              </button>
              <input
                id="avatar-input"
                type="file"
                accept="image/*"
                onChange={handleAvatarChange}
                className="hidden"
              />
              <p className="text-sm text-gray-500 dark:text-gray-400">
                JPG, GIF or PNG. 1MB max.
              </p>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Name Fields */}
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    First name
                  </label>
                  <input
                    type="text"
                    name="firstName"
                    value={formData.firstName}
                    onChange={handleChange}
                    className="w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white focus:ring-indigo-500 focus:border-indigo-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Last name
                  </label>
                  <input
                    type="text"
                    name="lastName"
                    value={formData.lastName}
                    onChange={handleChange}
                    className="w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white focus:ring-indigo-500 focus:border-indigo-500"
                  />
                </div>
              </div>

              {/* Email Field */}
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Email address
                </label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  className="w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              {/* Username Field */}
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Username
                </label>
                <input
                  type="text"
                  name="username"
                  value={formData.username}
                  onChange={handleChange}
                  className="w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              {/* Timezone Field */}
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Timezone
                </label>
                <select
                  name="timezone"
                  value={formData.timezone}
                  onChange={handleChange}
                  className="w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white focus:ring-indigo-500 focus:border-indigo-500"
                >
                  <option value="Pacific Standard Time">Pacific Standard Time</option>
                  <option value="Mountain Standard Time">Mountain Time</option>
                  <option value="Central Standard Time">Central Time</option>
                  <option value="Eastern Standard Time">Eastern Time</option>
                </select>
              </div>

              {/* Save Button */}
              <div className="flex justify-end">
                <button
                  type="submit"
                  disabled={isSaving}
                  className={`px-4 py-2 rounded-md text-white transition-all duration-200
                    ${isSaving 
                      ? 'bg-indigo-400 cursor-not-allowed' 
                      : 'bg-indigo-600 hover:bg-indigo-700'
                    } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                >
                  <div className="flex items-center space-x-2">
                    {isSaving && (
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                    )}
                    <span>{isSaving ? 'Saving...' : 'Save Changes'}</span>
                  </div>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Success Toast */}
      {showSuccess && (
        <div className="fixed bottom-4 right-4 bg-green-50 text-green-800 px-6 py-3 rounded-lg shadow-lg transition-all duration-500 transform translate-y-0 flex items-center min-w-[300px]">
          <svg className="w-6 h-6 text-green-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
          </svg>
          <span className="text-base font-medium flex-grow">{success}</span>
          <button 
            onClick={() => setShowSuccess(false)}
            className="ml-6 text-green-500 hover:text-green-600"
          >
            <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
      )}

      {/* Error Toast */}
      {error && (
        <div className="fixed bottom-4 right-4 bg-red-50 text-red-800 px-6 py-3 rounded-lg shadow-lg flex items-center min-w-[300px]">
          <svg className="w-6 h-6 text-red-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
          </svg>
          <span className="text-base font-medium flex-grow">{error}</span>
          <button 
            onClick={() => setError('')}
            className="ml-6 text-red-500 hover:text-red-600"
          >
            <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
      )}
    </PageTransition>
  );
}

export default Profile;

================
File: frontend/src/pages/RecommendationsPage.js
================
import React, { useState, useEffect, useRef, useMemo } from "react";
import PageTransition from "../components/PageTransition";
import { useAuth } from "../contexts/AuthContext";
import TranslatedText from "../components/TranslatedText";

// A helper function to simulate new data fetch:
function generateMockPosts(page = 1) {
  // For demo, we'll just replicate some posts, maybe with slight variations
  // In a real app, you'd fetch from an API endpoint with the page/offset.
  const baseItems = [
    {
      id: 1,
      type: "news",
      title: `Breaking: Big Trade Rumors (Page ${page})`,
      description: "Rumors are swirling about a potential blockbuster trade...",
      fullText: `Multiple sources indicate a major trade on page ${page}.`,
      upvotes: 10,
      downvotes: 2,
      comments: [
        {
          id: 101,
          author: "Mark Edwards",
          avatarUrl: "/images/default-avatar.jpg",
          title: "This rumor could shake up the league!",
          content: "Lots of buzz on page " + page,
        },
      ],
    },
    {
      id: 2,
      type: "video",
      title: `Amazing Homerun Highlight (Page ${page})`,
      description: "Check out this clutch homerun by the star player!",
      fullText: `A 2-run homer on page ${page}.`,
      videoUrl:
        "https://cuts.diamond.mlb.com/FORGE/2019/2019-04/22/abdef6c1-be0c15cf-0075faf5-csvm-diamondx64-asset_1280x720_59_4000K.mp4",
      upvotes: 25,
      downvotes: 1,
      comments: [
        {
          id: 201,
          author: "GrandSlam",
          avatarUrl: "/images/default-avatar.jpg",
          title: "Clutch Performance",
          content: "Unbelievable! That crack of the bat gave me chills.",
        },
      ],
    },
    {
      id: 3,
      type: "news",
      title: `Injury Update (Page ${page})`,
      description: "Star pitcher is expected to return soon...",
      fullText: `Good news on page ${page}: the ace is recovering.`,
      upvotes: 5,
      downvotes: 0,
      comments: [
        {
          id: 301,
          author: "FastballFreak",
          avatarUrl: "/images/default-avatar.jpg",
          title: "Crucial for the Postseason",
          content: "They need him healthy.",
        },
      ],
    },
  ];

  // In a real scenario, you'll have unique IDs for each item. Here,
  // we just produce new IDs so we don't clash with existing ones.
  return baseItems.map((item, index) => {
    return {
      ...item,
      id: parseInt(`${page}${index}`), // e.g. page=2 => 20,21,22
    };
  });
}

const fetchDescriptionFromGemini = async (title) => {
  try {
    const response = await fetch(
      `${process.env.REACT_APP_BACKEND_URL}/api/generate-blurb`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ title }),
      }
    );
    const data = await response.json();
    return data.success ? data.description : title;
  } catch (error) {
    console.error("Error fetching description:", error);
    return "Description unavailable.";
  }
};

function RecommendationsPage() {
  // Replace the dummy data with user data from AuthContext
  const { user } = useAuth();

  // Get followed teams and players from user data
  const followedTeams = user?.preferences?.teams || [];
  const followedPlayers = user?.preferences?.players || [];

  // Placeholder upcoming events
  const upcomingEvents = [
    { id: 1, date: "Jan 20", event: "Spring Training Begins" },
    { id: 2, date: "Feb 14", event: "First Preseason Game" },
    { id: 3, date: "Mar 27", event: "Opening Day" },
  ];

  // Track all feed items
  const [feedItems, setFeedItems] = useState([]);
  // Page counter for "infinite scroll"
  const [page, setPage] = useState(1);
  // Whether we are currently fetching more
  const [loading, setLoading] = useState(false);

  // Track the post open in the modal (if any)
  const [expandedPost, setExpandedPost] = useState(null);
  // For new comment text
  const [newComment, setNewComment] = useState("");

  // Get current user from AuthContext
  const [recommendations, setRecommendations] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [hasMore, setHasMore] = useState(true);
  const [isModelLoaded, setIsModelLoaded] = useState(false);
  const [followRecommendations, setFollowRecommendations] = useState([]);
  const [modelRecommendations, setModelRecommendations] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [followHasMore, setFollowHasMore] = useState(true);
  const [modelHasMore, setModelHasMore] = useState(true);

  // Add these state variables at the top with other states
  const [viewTimes, setViewTimes] = useState({});
  const [lastSubmittedRating, setLastSubmittedRating] = useState({});

  // -----------
  // FETCH LOGIC
  // ---------
  const fetchFollowRecommendations = async (pageNum) => {
    try {
      setIsLoadingMore(true);
      const response = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/recommend/follow?page=${pageNum}`,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
          }
        }
      );
      const data = await response.json();

      if (data.success) {
        const newRecommendations = await Promise.all(data.recommendations.map(async (rec) => {
          const videoResponse = await fetch(
            `${process.env.REACT_APP_BACKEND_URL}/api/mlb/video?play_id=${rec.reel_id}`,
            {
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                }
              }
            );
            const videoData = await videoResponse.json();

            const generatedDescription = await fetchDescriptionFromGemini(
              videoData.title
            );

            return {
              id: rec.reel_id,
              type: "video",
              title: videoData.success ? `${videoData.title} (follow)` : 'Followed Team/Player Highlight',
              description: videoData.success
                ? generatedDescription
                : "Highlight from your followed teams/players",
              videoUrl: videoData.success ? videoData.video_url : null,
              upvotes: 0,
              downvotes: 0,
              comments: [],
            };
          })
        );

        setFollowRecommendations((prev) => [...prev, ...newRecommendations]);
        setFollowHasMore(data.has_more);
      }
    } catch (err) {
      console.error("Error fetching follow recommendations:", err);
    } finally {
      setIsLoadingMore(false);
    }
  };

  const fetchModelRecommendations = async (pageNum) => {
    if (!user?.id) return;

    try {
      setIsLoading(true);
      const response = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/recommend/predict?user_id=${user.id}&page=${pageNum}&per_page=5&table=user_ratings_db`
      );
      const data = await response.json();

      if (data.success && data.recommendations?.length > 0) {
        const newRecommendations = await Promise.all(
          data.recommendations.map(async (rec) => {
            if (!rec.reel_id) return null;

            try {
              const videoResponse = await fetch(
                `${process.env.REACT_APP_BACKEND_URL}/api/mlb/video?play_id=${rec.reel_id}`
              );
              const videoData = await videoResponse.json();
              const generatedDescription = await fetchDescriptionFromGemini(
                videoData.title || "Baseball highlight"
              );

              if (!videoData.success) return null;

              return {
                id: rec.reel_id,
                type: "video",
                title: `${videoData.title} (model)`,
                description: generatedDescription,
                videoUrl: videoData.video_url,
                upvotes: Math.floor(rec.predicted_score),
                downvotes: 0,
                comments: [],
              };
            } catch (err) {
              return null;
            }
          })
        );

        const validRecommendations = newRecommendations.filter(
          (rec) => rec !== null
        );
        if (validRecommendations.length > 0) {
          setModelRecommendations((prev) => [...prev, ...validRecommendations]);
          setModelHasMore(data.has_more);
          setIsModelLoaded(true);
        } else {
          setModelHasMore(false);
        }
      } else {
        setModelHasMore(false);
      }
    } catch (err) {
      setModelHasMore(false);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle infinite scroll
  const handleLoadMore = async () => {
    if (isLoadingMore) return;

    const nextPage = currentPage + 1;
    try {
      setIsLoadingMore(true);
      const isEvenPage = nextPage % 2 === 0;
      const pageNumber = Math.ceil(nextPage / 2);

      if (isEvenPage) {
        await fetchFollowRecommendations(pageNumber);
        setCurrentPage(nextPage);
      } else {
        setCurrentPage(nextPage);
        await fetchModelRecommendations(pageNumber);
      }
    } finally {
      setIsLoadingMore(false);
    }
  };

  useEffect(() => {
    // Update the combined hasMore state based on both sources
    setHasMore(followHasMore || modelHasMore);
  }, [followHasMore, modelHasMore]);

  // Initial load
  useEffect(() => {
    fetchFollowRecommendations(1);
    fetchModelRecommendations(1);
  }, [user?.id]);

  // Combine recommendations
  const combinedRecommendations = useMemo(() => {
    if (!isModelLoaded) {
      return followRecommendations;
    }

    // When model loads, keep all existing followed recommendations
    // and alternate with model recommendations
    const combined = [];
    const pageSize = 5;
    const totalPages = Math.ceil(currentPage);

    for (let i = 0; i < totalPages; i++) {
      const startIdx = Math.floor(i / 2) * pageSize;
      const endIdx = startIdx + pageSize;

      if (i % 2 === 0) {
        // Add follow recommendations page
        const pageItems = followRecommendations.slice(startIdx, endIdx);
        if (pageItems.length > 0) {
          combined.push(...pageItems);
        }
      } else {
        // Add model recommendations page if they're loaded
        const modelItems = modelRecommendations.slice(startIdx, endIdx);
        if (modelItems.length > 0) {
          combined.push(...modelItems);
        }
      }
    }

    return combined;
  }, [isModelLoaded, followRecommendations, modelRecommendations, currentPage]);

  // Intersection Observer setup
  const observerRef = useRef(null);
  const sentinelRef = useRef(null);

  useEffect(() => {
    const options = {
      root: null,
      rootMargin: "200px",
      threshold: 0.1,
    };

    const observer = new IntersectionObserver((entries) => {
      const [entry] = entries;
      if (entry.isIntersecting && !isLoadingMore && hasMore) {
        handleLoadMore();
      }
    }, options);

    if (sentinelRef.current) {
      observer.observe(sentinelRef.current);
    }

    return () => {
      if (sentinelRef.current) {
        observer.unobserve(sentinelRef.current);
      }
    };
  }, [isLoadingMore, hasMore, currentPage]);

  // -----------
  // VOTING LOGIC
  // -----------
  const handleUpvote = (id) => {
    setFeedItems((prev) =>
      prev.map((item) =>
        item.id === id ? { ...item, upvotes: item.upvotes + 1 } : item
      )
    );
  };

  const handleDownvote = (id) => {
    setFeedItems((prev) =>
      prev.map((item) =>
        item.id === id ? { ...item, downvotes: item.downvotes + 1 } : item
      )
    );
  };

  // --------
  // MODAL LOGIC
  // --------
  // Open modal for a specific post
  const handleOpenModal = (post) => {
    setExpandedPost(post);
    setNewComment(""); // clear out any previous text
  };
  // Close modal
  const handleCloseModal = () => {
    setExpandedPost(null);
  };
  // Add a new comment
  const handleAddComment = (e) => {
    e.preventDefault();
    if (!newComment.trim()) return;

    setExpandedPost((prevPost) => {
      if (!prevPost) return null;

      const updatedComments = [
        ...prevPost.comments,
        {
          id: Date.now(),
          author: "You",
          avatarUrl: "/images/default-avatar.jpg",
          title: "My Response",
          content: newComment,
        },
      ];

      return { ...prevPost, comments: updatedComments };
    });
    setNewComment("");
  };

  // Add this function to calculate rating based on view time
  const calculateRating = (viewTime, duration) => {
    if (!viewTime || !duration) return 0;
    const percentage = viewTime / duration;
    if (percentage >= 0.9) return 5;
    if (percentage >= 0.7) return 4;
    if (percentage >= 0.5) return 3;
    if (percentage >= 0.3) return 2;
    if (percentage > 0) return 1;
    return 0;
  };

  // Add function to submit rating
  const submitRating = async (reelId, rating) => {
    if (!user?.id || lastSubmittedRating[reelId]) return;

    try {
      const response = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/recommend/add?user_id=${user.id}&reel_id=${reelId}&rating=${rating}&table=user_ratings_db`
      );
      if (response.ok) {
        setLastSubmittedRating((prev) => ({ ...prev, [reelId]: true }));
      }
    } catch (error) {
      console.error("Error submitting rating:", error);
    }
  };

  // Add these handlers for video events
  const handleTimeUpdate = (itemId, event) => {
    const video = event.target;
    setViewTimes((prev) => ({
      ...prev,
      [itemId]: {
        viewTime: (prev[itemId]?.viewTime || 0) + 0.25, // Update every quarter second
        duration: video.duration,
      },
    }));
  };

  const handleVideoEnd = (itemId) => {
    if (viewTimes[itemId]) {
      const rating = calculateRating(
        viewTimes[itemId].viewTime,
        viewTimes[itemId].duration
      );
      submitRating(itemId, rating);
    }
  };

  const handleVideoSwitch = (currentItemId) => {
    if (viewTimes[currentItemId]) {
      const rating = calculateRating(
        viewTimes[currentItemId].viewTime,
        viewTimes[currentItemId].duration
      );
      submitRating(currentItemId, rating);
    }
  };

  return (
    <PageTransition>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-16">
        {/* Grid layout: left sidebar, main feed, right sidebar */}
        <div className="grid grid-cols-12 gap-8">
          {/* LEFT SIDEBAR */}
          <aside className="col-span-3 hidden lg:block relative">
            <div className="fixed w-[280px] left-[calc((100vw-80rem)/2+1.5rem)] space-y-6 top-24">
              {/* Followed Teams */}
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-4 transition-all">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">
                  <TranslatedText text="Followed Teams" />
                </h2>
                {followedTeams.length > 0 ? (
                  followedTeams.map((team) => (
                    <div
                      key={team.id}
                      className="flex items-center justify-between py-2 border-b last:border-b-0 border-gray-200 dark:border-gray-700"
                    >
                      <span className="text-gray-800 dark:text-gray-200">
                        <TranslatedText text={team.name} />
                      </span>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500 dark:text-gray-400">
                    <TranslatedText text="No teams followed." />
                  </p>
                )}
              </div>

              {/* Followed Players */}
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-4 transition-all">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">
                  <TranslatedText text="Followed Players" />
                </h2>
                {followedPlayers.length > 0 ? (
                  followedPlayers.map((player) => (
                    <div
                      key={player.id}
                      className="flex items-center justify-between py-2 border-b last:border-b-0 border-gray-200 dark:border-gray-700"
                    >
                      <span className="text-gray-800 dark:text-gray-200">
                        <TranslatedText text={player.fullName} />
                      </span>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500 dark:text-gray-400">
                    <TranslatedText text="No players followed." />
                  </p>
                )}
              </div>
            </div>
          </aside>

          {/* MAIN FEED */}
          <main className="col-span-12 lg:col-span-6 space-y-6">
            {!isModelLoaded && (
              <div className="bg-blue-50 dark:bg-blue-900 p-4 rounded-lg mb-4">
                <p className="text-blue-700 dark:text-blue-200">
                  Loading personalized recommendations... Meanwhile, enjoy
                  highlights from your favorite teams and players!
                </p>
              </div>
            )}

            {combinedRecommendations.map((item) => (
              <div
                key={item.id}
                className="bg-white dark:bg-gray-800 shadow rounded-lg p-4
                           transition-transform transform hover:-translate-y-0.5
                           hover:shadow-lg duration-300 ease-in-out"
              >
                <h3 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                  <TranslatedText text={item.title} />
                </h3>
                <p className="mt-2 text-gray-700 dark:text-gray-300">
                  <TranslatedText text={item.description} />
                </p>

                {/* If it's a video, show the video player */}
                {item.type === "video" && item.videoUrl && (
                  <div className="mt-4">
                    <video
                      controls
                      className="w-full rounded-lg"
                      poster="https://via.placeholder.com/768x432.png?text=Video+Placeholder"
                      onTimeUpdate={(e) => handleTimeUpdate(item.id, e)}
                      onEnded={() => handleVideoEnd(item.id)}
                      onPlay={() => handleVideoSwitch(item.id)}
                    >
                      <source src={item.videoUrl} type="video/mp4" />
                      Your browser does not support the video tag.
                    </video>
                  </div>
                )}

                {/* Voting buttons */}
                <div className="mt-4 flex items-center space-x-4 text-gray-600 dark:text-gray-400">
                  <button
                    onClick={() => handleUpvote(item.id)}
                    className="flex items-center space-x-1 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                    aria-label={`Upvote ${item.title}`}
                  >
                    <svg
                      className="w-5 h-5"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M5 15l7-7 7 7"
                      />
                    </svg>
                    <span>{item.upvotes}</span>
                  </button>
                  <button
                    onClick={() => handleDownvote(item.id)}
                    className="flex items-center space-x-1 hover:text-red-600 dark:hover:text-red-400 transition-colors"
                    aria-label={`Downvote ${item.title}`}
                  >
                    <svg
                      className="w-5 h-5"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                    <span>{item.downvotes}</span>
                  </button>
                </div>

                {/* Button to read the full post (opens modal) */}
                <div className="mt-4">
                  <button
                    onClick={() => handleOpenModal(item)}
                    className="text-sm text-indigo-600 hover:text-indigo-800
                               dark:text-indigo-400 dark:hover:text-indigo-300
                               transition-colors"
                  >
                    <TranslatedText text="Read More" /> &rarr;
                  </button>
                </div>
              </div>
            ))}

            {/* Loading indicator */}
            {isLoadingMore && (
              <div className="text-center py-4">
                <p className="text-gray-600 dark:text-gray-400">
                  Loading more content...
                </p>
              </div>
            )}

            {/* Sentinel element for infinite scroll */}
            <div ref={sentinelRef} className="h-10" />
          </main>

          {/* RIGHT SIDEBAR */}
          <aside className="col-span-3 hidden lg:block relative">
            <div className="fixed w-[280px] right-[calc((100vw-80rem)/2+1.5rem)] top-24">
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-4 transition-all">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">
                  <TranslatedText text="Upcoming Events" />
                </h2>
                {upcomingEvents.map((event) => (
                  <div
                    key={event.id}
                    className="py-2 border-b last:border-b-0 border-gray-200 dark:border-gray-700"
                  >
                    <span className="font-medium text-gray-900 dark:text-gray-100 mr-2">
                      {event.date}
                    </span>
                    <span className="text-gray-700 dark:text-gray-300">
                      <TranslatedText text={event.event} />
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </aside>
        </div>
      </div>

      {/* MODAL for expanded post */}
      {expandedPost && (
        <div
          className="fixed inset-0 z-10 w-screen overflow-y-auto"
          role="dialog"
          aria-modal="true"
        >
          {/* Backdrop */}
          <div
            className="fixed inset-0 bg-gray-500/75 transition-opacity duration-300"
            aria-hidden="true"
            onClick={handleCloseModal}
          />

          {/* Modal Panel */}
          <div className="flex min-h-full items-center justify-center p-4 text-center sm:items-center">
            <div
              className="relative w-full max-w-4xl transform overflow-hidden
                         rounded-lg bg-white px-4 pb-8 pt-6 shadow-2xl transition-all
                         duration-300 dark:bg-gray-800 sm:px-6 sm:pt-8"
            >
              {/* Close Button */}
              <button
                type="button"
                className="absolute right-4 top-4 text-gray-400
                           hover:text-gray-500 dark:hover:text-gray-300
                           transition-colors"
                onClick={handleCloseModal}
              >
                <span className="sr-only">
                  <TranslatedText text="Close" />
                </span>
                <svg
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  aria-hidden="true"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M6 18 18 6M6 6l12 12"
                  />
                </svg>
              </button>

              {/* Modal Content */}
              <div className="mt-2 text-left">
                {/* Title */}
                <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4">
                  <TranslatedText text={expandedPost.title} />
                </h2>

                {/* Video if applicable */}
                {expandedPost.type === "video" && expandedPost.videoUrl && (
                  <div className="mb-4">
                    <video
                      controls
                      className="w-full rounded-lg"
                      poster="https://via.placeholder.com/768x432.png?text=Video+Placeholder"
                    >
                      <source src={expandedPost.videoUrl} type="video/mp4" />
                      Your browser does not support the video tag.
                    </video>
                  </div>
                )}

                {/* Full text */}
                <p className="text-gray-700 dark:text-gray-200 whitespace-pre-line">
                  <TranslatedText text={expandedPost.fullText} />
                </p>

                {/* Comments section */}
                <div className="mt-8">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
                    <TranslatedText text="Comments" />
                  </h3>

                  {expandedPost.comments && expandedPost.comments.length > 0 ? (
                    <ul className="space-y-8">
                      {expandedPost.comments.map((comment) => (
                        <li
                          key={comment.id}
                          className="flex flex-col sm:flex-row sm:space-x-4"
                        >
                          {/* Avatar */}
                          <div className="shrink-0 mb-2 sm:mb-0">
                            <img
                              className="h-12 w-12 rounded-full object-cover"
                              src={
                                comment.avatarUrl ||
                                "/images/default-avatar.jpg"
                              }
                              alt={comment.author}
                            />
                          </div>

                          {/* Main comment content */}
                          <div>
                            {/* Name */}
                            <p className="text-sm font-medium text-gray-800 dark:text-gray-200">
                              {comment.author}
                            </p>

                            {/* Title (optional) */}
                            {comment.title && (
                              <p className="mt-1 font-semibold text-gray-900 dark:text-gray-100">
                                {comment.title}
                              </p>
                            )}

                            {/* Body/content */}
                            <p className="mt-1 text-sm text-gray-700 dark:text-gray-300">
                              {comment.content}
                            </p>
                          </div>
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <p className="text-sm text-gray-500 dark:text-gray-400">
                      <TranslatedText text="No comments yet." />
                    </p>
                  )}
                </div>

                {/* Response form */}
                <div className="mt-8">
                  <h4 className="text-md font-semibold text-gray-900 dark:text-gray-100 mb-2">
                    <TranslatedText text="Add Your Comment" />
                  </h4>
                  <form onSubmit={handleAddComment} className="space-y-2">
                    <textarea
                      className="w-full rounded-md border border-gray-300
                                 dark:border-gray-700 bg-white dark:bg-gray-700
                                 px-3 py-2 text-sm text-gray-800 dark:text-gray-100
                                 focus:outline-none focus:ring-2 focus:ring-blue-500
                                 dark:focus:ring-blue-400"
                      rows={3}
                      placeholder="Write your thoughts..."
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                    />
                    <button
                      type="submit"
                      className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2
                                 text-sm font-medium text-white hover:bg-blue-700
                                 dark:bg-blue-500 dark:hover:bg-blue-600
                                 focus:outline-none focus:ring-2 focus:ring-blue-500
                                 dark:focus:ring-blue-400 transition-colors"
                    >
                      <TranslatedText text="Submit" />
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </PageTransition>
  );
}

export default RecommendationsPage;

================
File: frontend/src/pages/Register.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useDarkMode } from '../hooks/useDarkMode';
import { userService } from '../services/userService';
import PageTransition from '../components/PageTransition';

function Register() {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    firstName: '',
    lastName: '',
    username: ''
  });
  const [error, setError] = useState('');
  const { login } = useAuth();
  const navigate = useNavigate();
  const { isDarkMode } = useDarkMode();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    try {
      const backendUrl = process.env.REACT_APP_BACKEND_URL;
      console.log('Backend URL:', backendUrl); // Debug log
      console.log('Attempting registration to:', `${backendUrl}/auth/register`);
      
      // Register the user
      const registerResponse = await userService.register({
        email: formData.email,
        password: formData.password,
        firstName: formData.firstName,
        lastName: formData.lastName,
        username: formData.username
      });

      console.log('Register response:', registerResponse); // Debug log

      if (registerResponse.success) {
        // Log the user in automatically after registration
        const loginResponse = await userService.login(formData.email, formData.password);
        console.log('Login response:', loginResponse); // Debug log

        if (loginResponse.success) {
          login(loginResponse.token);
          navigate('/');
        } else {
          setError('Registration successful but login failed. Please try logging in.');
          navigate('/login');
        }
      } else {
        setError(registerResponse.message || 'Registration failed');
      }
    } catch (err) {
      console.error('Full error:', err);
      console.error('Error details:', {  // Additional error details
        message: err.message,
        response: err.response,
        status: err.response?.status,
        statusText: err.response?.statusText,
        data: err.response?.data
      });
      
      if (err.code === 'ERR_NETWORK') {
        setError('Cannot connect to server. Please check if the backend is running.');
      } else {
        setError(err.message || 'Failed to register');
      }
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <PageTransition>
      <div className={`min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8 ${isDarkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          <h2 className={`text-center text-3xl font-bold tracking-tight ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
            Create your account
          </h2>
        </div>

        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
          <div className={`py-8 px-4 shadow sm:rounded-lg sm:px-10 ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
            <form className="space-y-6" onSubmit={handleSubmit}>
              {/* First Name & Last Name */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label htmlFor="firstName" className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                    First name
                  </label>
                  <input
                    type="text"
                    name="firstName"
                    id="firstName"
                    required
                    className={`mt-1 block w-full rounded-md px-3 py-2 ${
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white' 
                        : 'border-gray-300 text-gray-900'
                    }`}
                    value={formData.firstName}
                    onChange={handleChange}
                  />
                </div>
                <div>
                  <label htmlFor="lastName" className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                    Last name
                  </label>
                  <input
                    type="text"
                    name="lastName"
                    id="lastName"
                    required
                    className={`mt-1 block w-full rounded-md px-3 py-2 ${
                      isDarkMode 
                        ? 'bg-gray-700 border-gray-600 text-white' 
                        : 'border-gray-300 text-gray-900'
                    }`}
                    value={formData.lastName}
                    onChange={handleChange}
                  />
                </div>
              </div>

              {/* Username */}
              <div>
                <label htmlFor="username" className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                  Username
                </label>
                <input
                  type="text"
                  name="username"
                  id="username"
                  required
                  className={`mt-1 block w-full rounded-md px-3 py-2 ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'border-gray-300 text-gray-900'
                  }`}
                  value={formData.username}
                  onChange={handleChange}
                />
              </div>

              {/* Email */}
              <div>
                <label htmlFor="email" className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                  Email address
                </label>
                <input
                  type="email"
                  name="email"
                  id="email"
                  required
                  className={`mt-1 block w-full rounded-md px-3 py-2 ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'border-gray-300 text-gray-900'
                  }`}
                  value={formData.email}
                  onChange={handleChange}
                />
              </div>

              {/* Password */}
              <div>
                <label htmlFor="password" className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                  Password
                </label>
                <input
                  type="password"
                  name="password"
                  id="password"
                  required
                  className={`mt-1 block w-full rounded-md px-3 py-2 ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'border-gray-300 text-gray-900'
                  }`}
                  value={formData.password}
                  onChange={handleChange}
                />
              </div>

              {/* Confirm Password */}
              <div>
                <label htmlFor="confirmPassword" className={`block text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                  Confirm password
                </label>
                <input
                  type="password"
                  name="confirmPassword"
                  id="confirmPassword"
                  required
                  className={`mt-1 block w-full rounded-md px-3 py-2 ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'border-gray-300 text-gray-900'
                  }`}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                />
              </div>

              {error && (
                <div className={`rounded-md p-4 ${isDarkMode ? 'bg-red-900' : 'bg-red-50'}`}>
                  <div className={`text-sm ${isDarkMode ? 'text-red-200' : 'text-red-700'}`}>{error}</div>
                </div>
              )}

              <button
                type="submit"
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Create account
              </button>
            </form>
          </div>
        </div>
      </div>
    </PageTransition>
  );
}

export default Register;

================
File: frontend/src/services/dataService.js
================
import axios from 'axios';

// Initialize users in localStorage if not exists
if (!localStorage.getItem('users')) {
  const defaultUsers = [
    {
      id: '1',
      email: 'admin@example.com',
      password: 'admin123', // In production, this would be hashed
      firstName: 'Admin',
      lastName: 'User',
      username: 'admin',
      timezone: 'Pacific Standard Time',
      avatarUrl: '/images/default-avatar.jpg',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  ];
  localStorage.setItem('users', JSON.stringify(defaultUsers));
}

export const dataService = {
  // User operations
  getUsers: () => {
    const data = localStorage.getItem('users');
    return JSON.parse(data);
  },

  getUserByEmail: (email) => {
    const users = dataService.getUsers();
    return users.find(user => user.email === email);
  },

  getUserById: (id) => {
    const users = dataService.getUsers();
    return users.find(user => user.id === id);
  },

  createUser: (userData) => {
    const users = dataService.getUsers();
    const newUser = {
      ...userData,
      id: Date.now().toString(),
      avatarUrl: '/images/default-avatar.jpg',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    users.push(newUser);
    localStorage.setItem('users', JSON.stringify(users));
    return newUser;
  },

  updateUser: (id, userData) => {
    const users = dataService.getUsers();
    const index = users.findIndex(user => user.id === id);
    if (index === -1) throw new Error('User not found');

    const updatedUser = {
      ...users[index],
      ...userData,
      updatedAt: new Date().toISOString()
    };
    users[index] = updatedUser;
    localStorage.setItem('users', JSON.stringify(users));
    return updatedUser;
  },

  deleteUser: (id) => {
    const users = dataService.getUsers();
    const filteredUsers = users.filter(user => user.id !== id);
    localStorage.setItem('users', JSON.stringify(filteredUsers));
  },

  verifyCredentials: (email, password) => {
    try {
      const users = dataService.getUsers();
      const user = users.find(user => user.email === email);
      
      if (!user) {
        return null;
      }

      // In a real application, you would hash the password and compare hashes
      // This is just for demonstration purposes
      if (user.password === password) {
        // Don't send the password back to the client
        const { password: _, ...userWithoutPassword } = user;
        return userWithoutPassword;
      }

      return null;
    } catch (error) {
      console.error('Error verifying credentials:', error);
      throw new Error('Failed to verify credentials');
    }
  },

  fetchTeams: async () => {
    try {
      console.log('Fetching teams through backend proxy...');
      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/api/mlb/teams`, {
        timeout: 15000,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.data || !response.data.teams) {
        console.error('Invalid response format:', response.data);
        throw new Error('Invalid response format from server');
      }
      
      console.log(`Successfully fetched ${response.data.teams.length} teams`);
      return response.data.teams;
    } catch (error) {
      console.error('Error fetching teams:', error);
      if (error.code === 'ECONNABORTED') {
        throw new Error('Request timed out. Please check your internet connection and try again.');
      }
      if (error.response?.status === 504) {
        throw new Error('Server request timed out. Please try again.');
      }
      throw error;
    }
  }
};

// Add this line to export fetchTeams directly
export const fetchTeams = dataService.fetchTeams;

================
File: frontend/src/services/translationService.js
================
import axios from 'axios';

export const translationService = {
  translate: async (text, targetLanguage = 'en') => {
    try {
      const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/api/translate`, {
        text,
        target_language: targetLanguage
      });
      return response.data.translatedText;
    } catch (error) {
      console.error('Translation error:', error);
      return text; // Return original text if translation fails
    }
  }
};

================
File: frontend/src/services/userService.js
================
import axios from 'axios';

const API_URL = process.env.REACT_APP_BACKEND_URL;

console.log('API URL:', API_URL); // Debug log

export const userService = {
  register: async (userData) => {
    try {
      console.log('Making registration request to:', `${API_URL}/auth/register`);
      const response = await axios.post(`${API_URL}/auth/register`, userData);
      console.log('Registration response:', response.data);
      return response.data;
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    }
  },

  login: async (email, password) => {
    try {
      console.log('Making login request to:', `${API_URL}/auth/login`);
      const response = await axios.post(`${API_URL}/auth/login`, { email, password });
      console.log('Login response:', response.data);
      return response.data;
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    }
  },

  getProfile: async () => {
    try {
      const response = await axios.get(`${API_URL}/auth/profile`);
      return response.data;
    } catch (error) {
      console.error('Profile fetch error:', error);
      if (error.code === 'ERR_NETWORK') {
        throw new Error('Cannot connect to server. Please check if the backend is running.');
      }
      if (error.response) {
        throw error.response.data;
      }
      throw error;
    }
  },

  updateProfile: async (userData) => {
    try {
      const response = await axios.put(`${API_URL}/auth/profile`, userData);
      return response.data;
    } catch (error) {
      console.error('Profile update error:', error);
      if (error.code === 'ERR_NETWORK') {
        throw new Error('Cannot connect to server. Please check if the backend is running.');
      }
      if (error.response) {
        throw error.response.data;
      }
      throw error;
    }
  }
};

================
File: frontend/src/setupTests.js
================
import '@testing-library/jest-dom';

================
File: frontend/src/styles/tailwind.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: frontend/src/utils/api.js
================
import axios from 'axios';
import { API_ENDPOINTS } from '../constants';

export const fetchTeams = async () => {
  try {
    const response = await axios.get(API_ENDPOINTS.MLB_TEAMS);
    return response.data.teams;
  } catch (error) {
    console.error('Error fetching teams:', error);
    throw error;
  }
};

export const fetchRoster = async (teamId) => {
  try {
    const response = await axios.get(API_ENDPOINTS.MLB_ROSTER(teamId));
    return response.data.roster;
  } catch (error) {
    console.error('Error fetching roster:', error);
    throw error;
  }
};

================
File: frontend/src/utils/retry.js
================
export const retry = async (fn, { retries = 3, delay = 1000, onRetry = () => {} } = {}) => {
  let lastError;
  
  for (let attempt = 0; attempt < retries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      lastError = error;
      
      if (attempt < retries - 1) {
        onRetry(error, attempt + 1);
        await new Promise(resolve => setTimeout(resolve, delay * (attempt + 1)));
      }
    }
  }
  
  throw lastError;
};

================
File: frontend/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        primary: '#3B82F6',
        secondary: '#6B7280',
      },
      typography: {
        DEFAULT: {
          css: {
            maxWidth: 'none',
            color: '#333',
            h1: {
              color: '#111',
              fontWeight: '700',
            },
            h2: {
              color: '#333',
              fontWeight: '600',
            },
            'code::before': {
              content: '""',
            },
            'code::after': {
              content: '""',
            },
          },
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio'),
  ],
}

================
File: LICENSE
================
MIT License

Copyright (c) 2024 MLB Fan Feed

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: path/to/index.html
================
<div id="video-wrapper">
    <script>
        // Example usage
        const videoId = '560a2f9b-9589-4e4b-95f5-2ef796334a94'; // Your MLB video ID
        const videoEmbed = createMLBVideoEmbed(videoId);
        document.getElementById('video-wrapper').appendChild(videoEmbed);
    </script>
</div>

================
File: path/to/styles/video.css
================
/* MLB Video Container Styles */
.mlb-video-container {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
    height: 0;
    overflow: hidden;
}

.mlb-video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

================
File: path/to/video/embed.js
================
// MLB Video Embed Configuration
function createMLBVideoEmbed(videoId) {
    // Create container for MLB video
    const videoContainer = document.createElement('div');
    videoContainer.className = 'mlb-video-container';
    
    // Create iframe for MLB video
    const videoIframe = document.createElement('iframe');
    videoIframe.src = `https://www.mlb.com/video/embed/${videoId}`;
    videoIframe.width = '100%';
    videoIframe.height = '100%';
    videoIframe.frameBorder = '0';
    videoIframe.allowFullscreen = true;
    
    // Add iframe to container
    videoContainer.appendChild(videoIframe);
    
    return videoContainer;
}

================
File: README.md
================
# MLB Fan Feed

A personalized MLB news feed that delivers AI-powered updates about your favorite team and player.

## Features

- 🏃‍♂️ Real-time MLB updates
- 🤖 AI-powered news digests using Gemini
- 📊 Team and player statistics
- 🎥 MLB video highlights
- 📱 Mobile-friendly design

## Quick Start

### Prerequisites

- Node.js 16+
- Python 3.9+
- Docker

### Setup

1. Clone the repository:
   ```bash
   git clone https://github.com/GentleOtaku/GoatSquad
   cd GoatSquad
   ```
2. Edit .env files (there should be 2) 
   
3. Install backend dependencies:
   ```bash
   cd backend
   pip install -r requirements.txt
   ```

4. Install frontend dependencies:
   ```bash
   cd frontend
   npm install
   ```

### Running the Application

1. Start the backend:
   ```bash
   cd backend
   python app.py
   ```

2. Start the frontend:
   ```bash
   cd frontend
   npm run dev
   ```


### Docker Setup

1. Build the Docker image:
   ```bash
   docker-compose build
   ```

2. Run the Docker containers:
   ```bash
   docker-compose up
   ```

================
File: remove-model.txt
================
backend/knn_model.pkl

================
File: setup.sh
================
#!/bin/bash

# Check if required tools are installed
command -v docker >/dev/null 2>&1 || { echo "Docker is required but not installed. Aborting." >&2; exit 1; }
command -v curl >/dev/null 2>&1 || { echo "curl is required but not installed. Aborting." >&2; exit 1; }

# Create required directories
mkdir -p .github/workflows

# Create GitHub Actions workflow file
cat > .github/workflows/docker-build.yml << 'EOF'
name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

      - name: Build and push Frontend image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

      - name: Create webhook event
        if: success()
        run: |
          curl -X POST ${{ secrets.PORTAINER_WEBHOOK_URL }}
EOF

echo "Setup complete! Remember to:"
echo "1. Add PORTAINER_WEBHOOK_URL to your GitHub repository secrets"
echo "2. Enable read/write permissions for GitHub Actions"
echo "3. Configure your Portainer stack with the provided docker-compose.yml"

================
File: upload_db.py
================
import pandas as pd
from sqlalchemy import create_engine

# Define database connection parameters
DB_USER = 'postgres'        # Replace with your database username
DB_PASSWORD = 'vibhas69'    # Replace with your database password
DB_HOST = '34.71.48.54'         # Replace with your database host (e.g., <instance>.cloudsql.<region>.gcp)
DB_PORT = '5432'                 # Default PostgreSQL port
DB_NAME = 'user_ratings_db'   # Replace with your database name

# Construct the database connection string
db_url = f"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

# Create a database engine
engine = create_engine(db_url)

# Load the CSV file into a pandas DataFrame
# file_path = 'mlb_highlights_2019-2024.csv'  # Path to your CSV file
file_path = 'mlb_highlights_2019-2024_players.csv'
df = pd.read_csv(file_path)

# Define the table name in the database
table_name = 'mlb_highlights_players'

# Upload the DataFrame to the database
try:
    # Append data to the table, creating the table if it doesn't exist
    df.to_sql(table_name, con=engine, if_exists='replace', index=False)
    print(f"Data successfully uploaded to the '{table_name}' table in the '{DB_NAME}' database.")
except Exception as e:
    print(f"An error occurred while uploading the data: {e}")
